#[version = "0.0.5"]
def @main(%x0: Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:3:18 */, %x1: Tensor[(13, 1), float32] /* ty=Tensor[(13, 1), float32] span=from_string:6:23 */, %x2: Tensor[(13), float32] /* ty=Tensor[(13), float32] span=from_string:13:24 */, %x3: Tensor[(13), float32] /* ty=Tensor[(13), float32] span=from_string:18:28 */, %x4: Tensor[(13), float32] /* ty=Tensor[(13), float32] span=from_string:19:30 */, %x5: Tensor[(13), float32] /* ty=Tensor[(13), float32] span=from_string:19:35 */, %x6: Tensor[(10, 1), float32] /* ty=Tensor[(10, 1), float32] span=from_string:28:25 */, %x7: Tensor[(10), float32] /* ty=Tensor[(10), float32] span=from_string:30:30 */, %x8: Tensor[(10), float32] /* ty=Tensor[(10), float32] span=from_string:30:35 */, %x9: Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:39:25 */, %x10: Tensor[(16, 13), float32] /* ty=Tensor[(16, 13), float32] span=from_string:45:25 */, %x11: Tensor[(33), float32] /* ty=Tensor[(33), float32] span=from_string:35:28 */, %x12: Tensor[(33), float32] /* ty=Tensor[(33), float32] span=from_string:37:30 */, %x13: Tensor[(33), float32] /* ty=Tensor[(33), float32] span=from_string:37:36 */, %x14: Tensor[(6), float32] /* ty=Tensor[(6), float32] span=from_string:51:30 */, %x15: Tensor[(6), float32] /* ty=Tensor[(6), float32] span=from_string:51:36 */, %x16: Tensor[(6), float32] /* ty=Tensor[(6), float32] span=from_string:51:42 */, %x17: Tensor[(6), float32] /* ty=Tensor[(6), float32] span=from_string:51:48 */) -> (Tensor[(3, 1, 1), float32], Tensor[(3, 33), float32], Tensor[(3, 6), float32], Tensor[(3, 43), float32]) {
  %0 = reshape(%x0, newshape=[3, 1]) /* ty=Tensor[(3, 1), float32] span=from_string:7:23 */;
  %1 = mean(%0, axis=[1], keepdims=True) /* ty=Tensor[(3, 1), float32] span=from_string:16:25 */;
  %2 = tanh(%1) /* ty=Tensor[(3, 1), float32] span=from_string:6:19 */;
  %3 = nn.dense(%2, %x1, units=13) /* ty=Tensor[(3, 13), float32] span=from_string:32:15 */;
  %4 = subtract(%3, %0) /* ty=Tensor[(3, 13), float32] span=from_string:8:15 */;
  %5 = tanh(%4) /* ty=Tensor[(3, 13), float32] span=from_string:11:23 */;
  %6 = negative(%5) /* ty=Tensor[(3, 13), float32] span=from_string:10:24 */;
  %7 = multiply(%6, %6) /* ty=Tensor[(3, 13), float32] span=from_string:15:21 */;
  %8 = subtract(%7, %5) /* ty=Tensor[(3, 13), float32] span=from_string:12:27 */;
  %9 = nn.batch_flatten(%8) /* ty=Tensor[(3, 13), float32] span=from_string:13:20 */;
  %10 = nn.prelu(%9, %x2) /* ty=Tensor[(3, 13), float32] span=from_string:23:39 */;
  %11 = tanh(%10) /* ty=Tensor[(3, 13), float32] span=from_string:40:23 */;
  %12 = multiply(%7, %11) /* ty=Tensor[(3, 13), float32] span=from_string:16:20 */;
  %13 = maximum(%12, %1) /* ty=Tensor[(3, 13), float32] span=from_string:17:25 */;
  %14 = maximum(%13, %13) /* ty=Tensor[(3, 13), float32] span=from_string:18:23 */;
  %15 = nn.bias_add(%14, %x3) /* ty=Tensor[(3, 13), float32] span=from_string:19:25 */;
  %16 = nn.group_norm(%15, %x4, %x5, num_groups=13, center=False, scale=False) /* ty=Tensor[(3, 13), float32] span=from_string:20:15 */;
  %17 = nn.softmax(%10, axis=1) /* ty=Tensor[(3, 13), float32] span=from_string:23:29 */;
  %18 = sum(%16, axis=[1], keepdims=True) /* ty=Tensor[(3, 1), float32] span=from_string:28:20 */;
  %19 = nn.batch_flatten(%17) /* ty=Tensor[(3, 13), float32] span=from_string:23:34 */;
  %20 = (%18, %17, %19, %10) /* ty=(Tensor[(3, 1), float32], Tensor[(3, 13), float32], Tensor[(3, 13), float32], Tensor[(3, 13), float32]) span=from_string:23:23 */;
  %21 = concatenate(%20, axis=1) /* ty=Tensor[(3, 40), float32] span=from_string:24:15 */;
  %22 = sum(%21, axis=[1]) /* ty=Tensor[(3), float32] span=from_string:25:25 */;
  %23 = nn.leaky_relu(%22, alpha=0.406455f) /* ty=Tensor[(3), float32] span=from_string:26:19 */;
  %24 = reshape(%23, newshape=[3, 1]) /* ty=Tensor[(3, 1), float32] span=from_string:39:20 */;
  %25 = nn.dense(%18, %x6, units=10) /* ty=Tensor[(3, 10), float32] span=from_string:29:15 */;
  %26 = tan(%25) /* ty=Tensor[(3, 10), float32] span=from_string:33:34 */;
  %27 = nn.layer_norm(%26, %x7, %x8, axis=1, center=False) /* ty=Tensor[(3, 10), float32] span=from_string:31:25 */;
  %28 = nn.leaky_relu(%27, alpha=0.613105f) /* ty=Tensor[(3, 10), float32] span=from_string:33:24 */;
  %29 = tan(%3) /* ty=Tensor[(3, 13), float32] span=from_string:33:29 */;
  %30 = (%28, %29, %26) /* ty=(Tensor[(3, 10), float32], Tensor[(3, 13), float32], Tensor[(3, 10), float32]) span=from_string:33:23 */;
  %31 = concatenate(%30, axis=1) /* ty=Tensor[(3, 33), float32] span=from_string:34:15 */;
  %32 = exp(%31) /* ty=Tensor[(3, 33), float32] span=from_string:35:23 */;
  %33 = nn.bias_add(%32, %x11) /* ty=Tensor[(3, 33), float32] span=from_string:55:16 */;
  %34 = nn.relu(%33) /* ty=Tensor[(3, 33), float32] span=from_string:37:25 */;
  %35 = nn.layer_norm(%34, %x12, %x13, axis=1, scale=False) /* ty=Tensor[(3, 33), float32] span=from_string:38:17 */;
  %36 = nn.prelu(%24, %x9) /* ty=Tensor[(3, 1), float32] span=from_string:40:18 */;
  %37 = divide(%36, %11) /* ty=Tensor[(3, 13), float32] span=from_string:41:15 */;
  %38 = cos(%37) /* ty=Tensor[(3, 13), float32] span=from_string:42:15 */;
  %39 = sin(%38) /* ty=Tensor[(3, 13), float32] span=from_string:43:17 */;
  %40 = round(%39) /* ty=Tensor[(3, 13), float32] span=from_string:44:25 */;
  %41 = nn.leaky_relu(%40, alpha=0.35374f) /* ty=Tensor[(3, 13), float32] span=from_string:45:20 */;
  %42 = nn.dense(%41, %x10, units=16) /* ty=Tensor[(3, 16), float32] span=from_string:46:25 */;
  %43 = nn.leaky_relu(%42, alpha=0.117858f) /* ty=Tensor[(3, 16), float32] span=from_string:47:17 */;
  %44 = split(%43, indices_or_sections=[5, 11], axis=1) /* ty=(Tensor[(3, 5), float32], Tensor[(3, 6), float32], Tensor[(3, 5), float32]) span=from_string:50:11 */;
  %45 = %44.1 /* ty=Tensor[(3, 6), float32] span=from_string:51:25 */;
  %46 = nn.batch_norm(%45, %x14, %x15, %x16, %x17, scale=False) /* ty=(Tensor[(3, 6), float32], Tensor[(6), float32], Tensor[(6), float32]) span=from_string:54:11 */;
  %47 = ceil(%33) /* ty=Tensor[(3, 33), float32] span=from_string:56:24 */;
  %48 = %44.0 /* ty=Tensor[(3, 5), float32] span=from_string:56:29 */;
  %49 = %44.2 /* ty=Tensor[(3, 5), float32] span=from_string:56:34 */;
  %50 = (%47, %48, %49) /* ty=(Tensor[(3, 33), float32], Tensor[(3, 5), float32], Tensor[(3, 5), float32]) span=from_string:56:23 */;
  %51 = concatenate(%50, axis=1) /* ty=Tensor[(3, 43), float32] span=from_string:57:15 */;
  %52 = exp(%51) /* ty=Tensor[(3, 43), float32] span=from_string:58:15 */;
  %53 = reshape(%24, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float32] span=from_string:59:6 */;
  %54 = trunc(%35) /* ty=Tensor[(3, 33), float32] span=from_string:59:11 */;
  %55 = %46.0 /* ty=Tensor[(3, 6), float32] span=from_string:59:16 */;
  %56 = sin(%52) /* ty=Tensor[(3, 43), float32] span=from_string:59:21 */;
  (%53, %54, %55, %56) /* ty=(Tensor[(3, 1, 1), float32], Tensor[(3, 33), float32], Tensor[(3, 6), float32], Tensor[(3, 43), float32]) span=from_string:3:5 */
}
