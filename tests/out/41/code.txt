#[version = "0.0.5"]
def @main(%x0: Tensor[(5), float16] /* ty=Tensor[(5), float16] span=from_string:3:14 */, %x1: Tensor[(1), float16] /* ty=Tensor[(1), float16] span=from_string:14:29 */, %x2: Tensor[(1), float16] /* ty=Tensor[(1), float16] span=from_string:14:34 */, %x3: Tensor[(1), float16] /* ty=Tensor[(1), float16] span=from_string:15:28 */, %x4: Tensor[(2, 1), float16] /* ty=Tensor[(2, 1), float16] span=from_string:19:25 */, %x5: Tensor[(3, 1), float16] /* ty=Tensor[(3, 1), float16] span=from_string:12:23 */, %x6: Tensor[(2), float16] /* ty=Tensor[(2), float16] span=from_string:29:28 */, %x7: Tensor[(2), float16] /* ty=Tensor[(2), float16] span=from_string:32:30 */, %x8: Tensor[(2), float16] /* ty=Tensor[(2), float16] span=from_string:32:35 */) -> (Tensor[(5, 2), float16],) {
  %0 = sin(%x0) /* ty=Tensor[(5), float16] span=from_string:4:24 */;
  %1 = nn.leaky_relu(%0, alpha=0.418746f) /* ty=Tensor[(5), float16] span=from_string:5:15 */;
  %2 = tanh(%1) /* ty=Tensor[(5), float16] span=from_string:6:18 */;
  %3 = reshape(%2, newshape=[5, 1]) /* ty=Tensor[(5, 1), float16] span=from_string:7:24 */;
  %4 = multiply(%3, %3) /* ty=Tensor[(5, 1), float16] span=from_string:8:21 */;
  %5 = nn.softmax(%4, axis=1) /* ty=Tensor[(5, 1), float16] span=from_string:9:23 */;
  %6 = subtract(%5, %5) /* ty=Tensor[(5, 1), float16] span=from_string:14:25 */;
  %7 = nn.leaky_relu(%6, alpha=0.145388f) /* ty=Tensor[(5, 1), float16] span=from_string:11:16 */;
  %8 = trunc(%7) /* ty=Tensor[(5, 1), float16] span=from_string:12:19 */;
  %9 = nn.dense(%8, %x5, units=3) /* ty=Tensor[(5, 3), float16] span=from_string:13:18 */;
  %10 = nn.group_norm(%6, %x1, %x2, num_groups=1, center=False) /* ty=Tensor[(5, 1), float16] span=from_string:15:23 */;
  %11 = nn.bias_add(%10, %x3) /* ty=Tensor[(5, 1), float16] span=from_string:21:23 */;
  %12 = abs(%11) /* ty=Tensor[(5, 1), float16] span=from_string:17:19 */;
  %13 = nn.relu(%12) /* ty=Tensor[(5, 1), float16] span=from_string:18:16 */;
  %14 = ceil(%13) /* ty=Tensor[(5, 1), float16] span=from_string:19:20 */;
  %15 = nn.dense(%14, %x4, units=2) /* ty=Tensor[(5, 2), float16] span=from_string:20:15 */;
  %16 = exp(%15) /* ty=Tensor[(5, 2), float16] span=from_string:21:18 */;
  %17 = divide(%16, %11) /* ty=Tensor[(5, 2), float16] span=from_string:28:25 */;
  %18 = tanh(%17) /* ty=Tensor[(5, 2), float16] span=from_string:23:17 */;
  %19 = round(%18) /* ty=Tensor[(5, 2), float16] span=from_string:24:19 */;
  %20 = nn.relu(%19) /* ty=Tensor[(5, 2), float16] span=from_string:25:15 */;
  %21 = exp(%20) /* ty=Tensor[(5, 2), float16] span=from_string:26:25 */;
  %22 = mean(%9, axis=[1], keepdims=True) /* ty=Tensor[(5, 1), float16] span=from_string:27:20 */;
  %23 = nn.leaky_relu(%21, alpha=0.0771588f) /* ty=Tensor[(5, 2), float16] span=from_string:27:25 */;
  %24 = subtract(%22, %23) /* ty=Tensor[(5, 2), float16] span=from_string:28:20 */;
  %25 = subtract(%24, %17) /* ty=Tensor[(5, 2), float16] span=from_string:29:23 */;
  %26 = nn.bias_add(%25, %x6) /* ty=Tensor[(5, 2), float16] span=from_string:30:20 */;
  %27 = negative(%26) /* ty=Tensor[(5, 2), float16] span=from_string:31:15 */;
  %28 = abs(%27) /* ty=Tensor[(5, 2), float16] span=from_string:32:25 */;
  %29 = nn.layer_norm(%28, %x7, %x8, axis=1, center=False, scale=False) /* ty=Tensor[(5, 2), float16] span=from_string:33:6 */;
  (%29,) /* ty=(Tensor[(5, 2), float16],) span=from_string:3:5 */
}
