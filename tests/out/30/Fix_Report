Fixed


**************************************************
fixed method: Targeted repair


**************************************************
After repairing, error prone input's mean relatively error is: 0.0000000000


**************************************************
After repairing, mean relatively error is: 0.0000000000


**************************************************
The best recommendation:

#[version = "0.0.5"]
def @main(%pzx: Tensor[(2, 4, 40, 10, 10), float32] /* ty=Tensor[(2, 4, 40, 10, 10), float32] span=from_string:15:13 */, %pzweight: Tensor[(2, 4, 3, 3, 3), float32] /* ty=Tensor[(2, 4, 3, 3, 3), float32] span=from_string:16:13 */, %pzin_bias: Tensor[(4, 1, 1, 1), float32] /* ty=Tensor[(4, 1, 1, 1), float32] span=from_string:15:19 */, %px1: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px2: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px3: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px4: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px5: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px6: Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:114:28 */, %px7: Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:143:28 */, %px8: Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:143:34 */, hash="6941bf7bff64736d") -> (Tensor[(2), float32], Tensor[(2, 2, 10), float32], Tensor[(2), float32], Tensor[(2), float32]) {
  %0 = cast(%pzx, dtype="float64") /* ty=Tensor[(2, 4, 40, 10, 10), float64] span=from_string:7:17 */;
  %1 = cast(%pzin_bias, dtype="float64") /* ty=Tensor[(4, 1, 1, 1), float64] span=from_string:8:16 */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 1, 1, 1), float32] span=from_string:15:36 */, dtype="float64") /* ty=Tensor[(4, 1, 1, 1), float64] span=from_string:8:21 */;
  %3 = nn.relu(%0) /* ty=Tensor[(2, 4, 40, 10, 10), float64] span=from_string:9:13 */;
  %4 = divide(%1, %2) /* ty=Tensor[(4, 1, 1, 1), float64] span=from_string:9:18 */;
  %5 = add(%3, %4) /* ty=Tensor[(2, 4, 40, 10, 10), float64] span=from_string:10:8 */;
  %6 = cast(%5, dtype="float32") /* ty=Tensor[(2, 4, 40, 10, 10), float32] span=from_string:4:3 */;
  %7 = multiply(%pzweight, meta[relay.Constant][1] /* ty=Tensor[(4, 1, 1, 1), float32] span=from_string:16:29 */) /* ty=Tensor[(2, 4, 3, 3, 3), float32] span=from_string:13:6 */;
  %8 = nn.conv3d(%6, %7, padding=[1, 1, 1, 1, 1, 1], channels=2, kernel_size=[3, 3, 3]) /* ty=Tensor[(2, 2, 40, 10, 10), float32] span=from_string:18:5 */;
  %9 = sum(%8, axis=[2, 4]) /* ty=Tensor[(2, 2, 10), float32] span=from_string:22:5 */;
  %10 = reshape(%9, newshape=[2, 2, 1, 10]) /* ty=Tensor[(2, 2, 1, 10), float32] span=from_string:26:5 */;
  %11 = mean(%10, axis=[2, 3], keepdims=True) /* ty=Tensor[(2, 2, 1, 1), float32] span=from_string:30:7 */;
  %12 = variance(%10, %11, axis=[2, 3], keepdims=True) /* ty=Tensor[(2, 2, 1, 1), float32] span=from_string:34:5 */;
  %13 = add(%12, 1e-05f /* ty=float32 span=from_string:38:26 */) /* ty=Tensor[(2, 2, 1, 1), float32] span=from_string:40:17 */;
  %14 = subtract(%10, %11) /* ty=Tensor[(2, 2, 1, 10), float32] span=from_string:41:21 */;
  %15 = rsqrt(%13) /* ty=Tensor[(2, 2, 1, 1), float32] span=from_string:41:26 */;
  %16 = multiply(%14, %15) /* ty=Tensor[(2, 2, 1, 10), float32] span=from_string:42:13 */;
  %17 = reshape(%16, newshape=[2, 2, 10]) /* ty=Tensor[(2, 2, 10), float32] span=from_string:38:5 */;
  %18 = nn.fast_softmax(%17, axis=1) /* ty=Tensor[(2, 2, 10), float32] span=from_string:46:5 */;
  %19 = sum(%18, axis=[1, 2]) /* ty=Tensor[(2), float32] span=from_string:50:5 */;
  %20 = trunc(%19) /* ty=Tensor[(2), float32] span=from_string:55:17 */;
  %21 = floor(%20) /* ty=Tensor[(2), float32] span=from_string:56:14 */;
  %22 = fast_exp(%21) /* ty=Tensor[(2), float32] span=from_string:54:5 */;
  %23 = floor(%22) /* ty=Tensor[(2), float32] span=from_string:61:20 */;
  %24 = fast_tanh(%23) /* ty=Tensor[(2), float32] span=from_string:62:16 */;
  %25 = floor(%24) /* ty=Tensor[(2), float32] span=from_string:63:24 */;
  %26 = nn.leaky_relu(%25, alpha=0.185629f) /* ty=Tensor[(2), float32] span=from_string:64:15 */;
  %27 = ceil(%26) /* ty=Tensor[(2), float32] span=from_string:65:20 */;
  %28 = fast_tanh(%27) /* ty=Tensor[(2), float32] span=from_string:66:18 */;
  %29 = nn.relu(%28) /* ty=Tensor[(2), float32] span=from_string:67:16 */;
  %30 = floor(%29) /* ty=Tensor[(2), float32] span=from_string:68:20 */;
  %31 = transpose(%30, axes=[0]) /* ty=Tensor[(2), float32] span=from_string:69:14 */;
  %32 = abs(%31) /* ty=Tensor[(2), float32] span=from_string:70:15 */;
  %33 = tan(%32) /* ty=Tensor[(2), float32] span=from_string:71:13 */;
  %34 = nn.relu(%33) /* ty=Tensor[(2), float32] span=from_string:60:5 */;
  %35 = sin(%17) /* ty=Tensor[(2, 2, 10), float32] span=from_string:79:9 */;
  %36 = cos(%35) /* ty=Tensor[(2, 2, 10), float32] span=from_string:78:5 */;
  %37 = mean(%36, axis=[1], keepdims=True) /* ty=Tensor[(2, 1, 10), float32] span=from_string:83:7 */;
  %38 = variance(%36, %37, axis=[1], keepdims=True) /* ty=Tensor[(2, 1, 10), float32] span=from_string:87:5 */;
  %39 = add(%38, 1e-05f /* ty=float32 span=from_string:91:27 */) /* ty=Tensor[(2, 1, 10), float32] span=from_string:93:17 */;
  %40 = subtract(%36, %37) /* ty=Tensor[(2, 2, 10), float32] span=from_string:94:15 */;
  %41 = rsqrt(%39) /* ty=Tensor[(2, 1, 10), float32] span=from_string:94:20 */;
  %42 = multiply(%40, %41) /* ty=Tensor[(2, 2, 10), float32] span=from_string:91:5 */;
  %43 = mean(%42, axis=[2], keepdims=True) /* ty=Tensor[(2, 2, 1), float32] span=from_string:98:7 */;
  %44 = variance(%42, %43, axis=[2], keepdims=True) /* ty=Tensor[(2, 2, 1), float32] span=from_string:102:5 */;
  %45 = add(%44, 1e-05f /* ty=float32 span=from_string:106:27 */) /* ty=Tensor[(2, 2, 1), float32] span=from_string:108:17 */;
  %46 = subtract(%42, %43) /* ty=Tensor[(2, 2, 10), float32] span=from_string:109:21 */;
  %47 = rsqrt(%45) /* ty=Tensor[(2, 2, 1), float32] span=from_string:109:26 */;
  %48 = multiply(%46, %47) /* ty=Tensor[(2, 2, 10), float32] span=from_string:111:15 */;
  %49 = expand_dims(%px6, axis=1) /* ty=Tensor[(2, 1), float32] span=from_string:111:20 */;
  %50 = add(%48, %49) /* ty=Tensor[(2, 2, 10), float32] span=from_string:112:14 */;
  %51 = negative(%50) /* ty=Tensor[(2, 2, 10), float32] span=from_string:106:5 */;
  %52 = mean(%51, axis=[2], keepdims=True) /* ty=Tensor[(2, 2, 1), float32] span=from_string:116:7 */;
  %53 = variance(%51, %52, axis=[2], keepdims=True) /* ty=Tensor[(2, 2, 1), float32] span=from_string:120:5 */;
  %54 = add(%53, 1e-05f /* ty=float32 span=from_string:124:27 */) /* ty=Tensor[(2, 2, 1), float32] span=from_string:126:17 */;
  %55 = subtract(%51, %52) /* ty=Tensor[(2, 2, 10), float32] span=from_string:127:21 */;
  %56 = rsqrt(%54) /* ty=Tensor[(2, 2, 1), float32] span=from_string:127:26 */;
  %57 = multiply(%55, %56) /* ty=Tensor[(2, 2, 10), float32] span=from_string:129:21 */;
  %58 = expand_dims(%px7, axis=1) /* ty=Tensor[(2, 1), float32] span=from_string:129:26 */;
  %59 = multiply(%57, %58) /* ty=Tensor[(2, 2, 10), float32] span=from_string:131:9 */;
  %60 = expand_dims(%px8, axis=1) /* ty=Tensor[(2, 1), float32] span=from_string:131:14 */;
  %61 = fast_exp(%22) /* ty=Tensor[(2), float32] span=from_string:135:20 */;
  %62 = negative(%61) /* ty=Tensor[(2), float32] span=from_string:136:19 */;
  %63 = nn.relu(%62) /* ty=Tensor[(2), float32] span=from_string:137:13 */;
  %64 = round(%34) /* ty=Tensor[(2), float32] span=from_string:75:5 */;
  %65 = add(%59, %60) /* ty=Tensor[(2, 2, 10), float32] span=from_string:124:5 */;
  %66 = nn.relu(%63) /* ty=Tensor[(2), float32] span=from_string:134:5 */;
  %67 = fast_tanh(%34) /* ty=Tensor[(2), float32] span=from_string:140:5 */;
  (%64, %65, %66, %67) /* ty=(Tensor[(2), float32], Tensor[(2, 2, 10), float32], Tensor[(2), float32], Tensor[(2), float32]) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1,
  "nodes": [
    {
      "type_key": ""
    },
    {
      "type_key": "Map",
      "keys": [
        "relay.Constant"
      ],
      "data": [2]
    },
    {
      "type_key": "Array",
      "data": [3, 14]
    },
    {
      "type_key": "relay.Constant",
      "attrs": {
        "_checked_type_": "8",
        "data": "0",
        "span": "6",
        "virtual_device_": "4"
      }
    },
    {
      "type_key": "VirtualDevice",
      "attrs": {
        "device_type_int": "-1",
        "memory_scope": "5",
        "target": "0",
        "virtual_device_id": "-1"
      }
    },
    {
      "type_key": "runtime.String"
    },
    {
      "type_key": "Span",
      "attrs": {
        "column": "36",
        "end_column": "54",
        "end_line": "15",
        "line": "15",
        "source_name": "7"
      }
    },
    {
      "type_key": "SourceName",
      "repr_str": "from_string"
    },
    {
      "type_key": "relay.TensorType",
      "attrs": {
        "dtype": "float32",
        "shape": "9",
        "span": "0"
      }
    },
    {
      "type_key": "Array",
      "data": [10, 11, 12, 13]
    },
    {
      "type_key": "IntImm",
      "attrs": {
        "dtype": "int32",
        "span": "0",
        "value": "4"
      }
    },
    {
      "type_key": "IntImm",
      "attrs": {
        "dtype": "int32",
        "span": "0",
        "value": "1"
      }
    },
    {
      "type_key": "IntImm",
      "attrs": {
        "dtype": "int32",
        "span": "0",
        "value": "1"
      }
    },
    {
      "type_key": "IntImm",
      "attrs": {
        "dtype": "int32",
        "span": "0",
        "value": "1"
      }
    },
    {
      "type_key": "relay.Constant",
      "attrs": {
        "_checked_type_": "16",
        "data": "1",
        "span": "15",
        "virtual_device_": "4"
      }
    },
    {
      "type_key": "Span",
      "attrs": {
        "column": "29",
        "end_column": "47",
        "end_line": "16",
        "line": "16",
        "source_name": "7"
      }
    },
    {
      "type_key": "relay.TensorType",
      "attrs": {
        "dtype": "float32",
        "shape": "17",
        "span": "0"
      }
    },
    {
      "type_key": "Array",
      "data": [18, 19, 20, 21]
    },
    {
      "type_key": "IntImm",
      "attrs": {
        "dtype": "int32",
        "span": "0",
        "value": "4"
      }
    },
    {
      "type_key": "IntImm",
      "attrs": {
        "dtype": "int32",
        "span": "0",
        "value": "1"
      }
    },
    {
      "type_key": "IntImm",
      "attrs": {
        "dtype": "int32",
        "span": "0",
        "value": "1"
      }
    },
    {
      "type_key": "IntImm",
      "attrs": {
        "dtype": "int32",
        "span": "0",
        "value": "1"
      }
    }
  ],
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAABAAAAAIgAQAEAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAABAAAAAAAAAA4x4hP1gtbj+wVCc/TYsMPw==",
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAABAAAAAIgAQAEAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAABAAAAAAAAAA4x4hP1gtbj+wVCc/TYsMPw=="
  ],
  "attrs": {"tvm_version": "0.12.dev0"}
}


**************************************************
The repair subgraph:

#[version = "0.0.5"]
def @main(%p010: Tensor[(2, 4, 3, 3, 3), float32] /* ty=Tensor[(2, 4, 3, 3, 3), float32] span=from_string:3:15 */, %p13: Tensor[(4, 1, 1, 1), float32] /* ty=Tensor[(4, 1, 1, 1), float32] span=from_string:3:22 */) -> Tensor[(2, 4, 3, 3, 3), float32] {
  multiply(%p010, %p13) /* ty=Tensor[(2, 4, 3, 3, 3), float32] span=from_string:3:6 */
}
