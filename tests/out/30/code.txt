#[version = "0.0.5"]
def @main(%pzx: Tensor[(2, 4, 40, 10, 10), float32] /* ty=Tensor[(2, 4, 40, 10, 10), float32] */, %pzweight: Tensor[(2, 4, 3, 3, 3), float32] /* ty=Tensor[(2, 4, 3, 3, 3), float32] */, %pzin_bias: Tensor[(4, 1, 1, 1), float32] /* ty=Tensor[(4, 1, 1, 1), float32] */, %px1: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px2: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px3: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px4: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px5: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px6: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px7: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px8: Tensor[(2), float32] /* ty=Tensor[(2), float32] */) -> (Tensor[(2), float32], Tensor[(2, 2, 10), float32], Tensor[(2), float32], Tensor[(2), float32]) {
  %0 = multiply(%pzx, meta[relay.Constant][0] /* ty=Tensor[(4, 1, 1, 1), float32] span=from_string:3:27 */) /* ty=Tensor[(2, 4, 40, 10, 10), float32] span=from_string:4:16 */;
  %1 = nn.relu(%0) /* ty=Tensor[(2, 4, 40, 10, 10), float32] span=from_string:5:12 */;
  %2 = add(%1, %pzin_bias) /* ty=Tensor[(2, 4, 40, 10, 10), float32] span=from_string:6:18 */;
  %3 = nn.conv3d(%2, %pzweight, padding=[1, 1, 1, 1, 1, 1], channels=2, kernel_size=[3, 3, 3]) /* ty=Tensor[(2, 2, 40, 10, 10), float32] span=from_string:7:7 */;
  %4 = sum(%3, axis=[-1, -3]) /* ty=Tensor[(2, 2, 10), float32] span=from_string:3:3 */;
  %5 = nn.group_norm(%4, %px1, %px2, num_groups=2, center=False, scale=False) /* ty=Tensor[(2, 2, 10), float32] span=from_string:22:15 */;
  %6 = nn.softmax(%5, axis=1) /* ty=Tensor[(2, 2, 10), float32] span=from_string:5:14 */;
  %7 = sum(%6, axis=[1, 2]) /* ty=Tensor[(2), float32] span=from_string:6:16 */;
  %8 = trunc(%7) /* ty=Tensor[(2), float32] span=from_string:7:16 */;
  %9 = floor(%8) /* ty=Tensor[(2), float32] span=from_string:8:14 */;
  %10 = exp(%9) /* ty=Tensor[(2), float32] span=from_string:28:15 */;
  %11 = floor(%10) /* ty=Tensor[(2), float32] span=from_string:10:15 */;
  %12 = tanh(%11) /* ty=Tensor[(2), float32] span=from_string:11:16 */;
  %13 = floor(%12) /* ty=Tensor[(2), float32] span=from_string:12:24 */;
  %14 = nn.leaky_relu(%13, alpha=0.185629f) /* ty=Tensor[(2), float32] span=from_string:13:16 */;
  %15 = ceil(%14) /* ty=Tensor[(2), float32] span=from_string:14:16 */;
  %16 = tanh(%15) /* ty=Tensor[(2), float32] span=from_string:15:19 */;
  %17 = nn.relu(%16) /* ty=Tensor[(2), float32] span=from_string:16:17 */;
  %18 = floor(%17) /* ty=Tensor[(2), float32] span=from_string:17:21 */;
  %19 = transpose(%18, axes=[0]) /* ty=Tensor[(2), float32] span=from_string:18:15 */;
  %20 = abs(%19) /* ty=Tensor[(2), float32] span=from_string:19:15 */;
  %21 = tan(%20) /* ty=Tensor[(2), float32] span=from_string:20:19 */;
  %22 = nn.relu(%21) /* ty=Tensor[(2), float32] span=from_string:32:16 */;
  %23 = sin(%5) /* ty=Tensor[(2, 2, 10), float32] span=from_string:23:15 */;
  %24 = cos(%23) /* ty=Tensor[(2, 2, 10), float32] span=from_string:24:25 */;
  %25 = nn.layer_norm(%24, %px3, %px4, axis=1, center=False, scale=False) /* ty=Tensor[(2, 2, 10), float32] span=from_string:25:30 */;
  %26 = nn.instance_norm(%25, %px5, %px6, scale=False) /* ty=Tensor[(2, 2, 10), float32] span=from_string:26:20 */;
  %27 = negative(%26) /* ty=Tensor[(2, 2, 10), float32] span=from_string:27:30 */;
  %28 = exp(%10) /* ty=Tensor[(2), float32] span=from_string:29:20 */;
  %29 = negative(%28) /* ty=Tensor[(2), float32] span=from_string:30:19 */;
  %30 = nn.relu(%29) /* ty=Tensor[(2), float32] span=from_string:31:19 */;
  %31 = round(%22) /* ty=Tensor[(2), float32] span=from_string:33:6 */;
  %32 = nn.instance_norm(%27, %px7, %px8) /* ty=Tensor[(2, 2, 10), float32] span=from_string:33:11 */;
  %33 = nn.relu(%30) /* ty=Tensor[(2), float32] span=from_string:33:16 */;
  %34 = tanh(%22) /* ty=Tensor[(2), float32] span=from_string:33:21 */;
  (%31, %32, %33, %34) /* ty=(Tensor[(2), float32], Tensor[(2, 2, 10), float32], Tensor[(2), float32], Tensor[(2), float32]) span=from_string:3:5 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.Constant"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "8", 
        "data": "0", 
        "span": "6", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "5", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "27", 
        "end_column": "45", 
        "end_line": "3", 
        "line": "3", 
        "source_name": "7"
      }
    }, 
    {
      "type_key": "SourceName", 
      "repr_str": "from_string"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "9", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [10, 11, 12, 13]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAABAAAAAIgAQAEAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAABAAAAAAAAAA4x4hP1gtbj+wVCc/TYsMPw=="
  ], 
  "attrs": {"tvm_version": "0.12.dev0"}
}