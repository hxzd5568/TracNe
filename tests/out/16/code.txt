#[version = "0.0.5"]
def @main(%pzx: Tensor[(64, 2, 1), float32] /* ty=Tensor[(64, 2, 1), float32] */) -> (Tensor[(64, 2, 1), float32],) {
  %0 = sqrt(%pzx) /* ty=Tensor[(64, 2, 1), float32] span=from_string:4:16 */;
  %1 = divide(2.5f /* ty=float32 span=from_string:4:14 */, %0) /* ty=Tensor[(64, 2, 1), float32] span=from_string:3:3 */;
  %2 = cos(%1) /* ty=Tensor[(64, 2, 1), float32] span=from_string:5:24 */;
  %3 = nn.relu(%2) /* ty=Tensor[(64, 2, 1), float32] span=from_string:8:23 */;
  %4 = multiply(%3, %2) /* ty=Tensor[(64, 2, 1), float32] span=from_string:6:16 */;
  %5 = floor(%4) /* ty=Tensor[(64, 2, 1), float32] span=from_string:7:14 */;
  %6 = tan(%5) /* ty=Tensor[(64, 2, 1), float32] span=from_string:8:19 */;
  %7 = maximum(%6, %3) /* ty=Tensor[(64, 2, 1), float32] span=from_string:9:24 */;
  %8 = strided_slice(%7, begin=[0], end=[1], strides=[2], axes=[2]) /* ty=Tensor[(64, 2, 1), float32] span=from_string:10:21 */;
  %9 = nn.softmax(%8, axis=1) /* ty=Tensor[(64, 2, 1), float32] span=from_string:11:18 */;
  %10 = nn.relu(%9) /* ty=Tensor[(64, 2, 1), float32] span=from_string:12:24 */;
  %11 = nn.avg_pool1d(%10, pool_size=[3], dilation=[2], padding=[2, 2]) /* ty=Tensor[(64, 2, 1), float32] span=from_string:13:6 */;
  (%11,) /* ty=(Tensor[(64, 2, 1), float32],) span=from_string:3:5 */
}
