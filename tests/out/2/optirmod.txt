#[version = "0.0.5"]
def @main(%data : Tensor[(2, 3, 16, 16), float32] /* ty=Tensor[(2, 3, 16, 16), float32] span=from_string:3:18 */, %graph_conv_weight : Tensor[(3, 3, 3, 3), float32] /* ty=Tensor[(3, 3, 3, 3), float32] span=from_string:3:25 */, %graph_bn_gamma : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:4:26 */, %graph_bn_beta : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:4:43 */, %graph_bn_moving_mean : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:4:59 */, %graph_bn_moving_var : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:4:82 */, hash="207be382d416893d", src_layout="NCHW", dst_layout="NCHW3c", ) -> Tensor[(2, 3, 8, 8), float32] {
  %2 = fn (%p02: Tensor[(2, 3, 16, 16), float32] /* ty=Tensor[(2, 3, 16, 16), float32] */, Primitive=1, hash="c93169fe34aa6fd1", src_layout="NCHW", dst_layout="NCHW3c") -> Tensor[(2, 1, 16, 16, 3), float32] {
    layout_transform(%p02, src_layout="NCHW", dst_layout="NCHW3c") /* ty=Tensor[(2, 1, 16, 16, 3), float32] */
  } /* ty=fn (Tensor[(2, 3, 16, 16), float32]) -> Tensor[(2, 1, 16, 16, 3), float32] */;
  %9 = fn (%p04: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p12: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, Primitive=1, hash="d230ec3b0e727702") -> Tensor[(3), float32] {
    %7 = add(%p04, 1e-05f /* ty=float32 */) /* ty=Tensor[(3), float32] */;
    %8 = rsqrt(%7) /* ty=Tensor[(3), float32] */;
    multiply(%8, %p12) /* ty=Tensor[(3), float32] */
  } /* ty=fn (Tensor[(3), float32], Tensor[(3), float32]) -> Tensor[(3), float32] */;
  %10 = %9(%graph_bn_moving_var, %graph_bn_gamma) /* ty=Tensor[(3), float32] */;
  %11 = fn (%p03: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p11: Tensor[(3, 3, 3, 3), float32] /* ty=Tensor[(3, 3, 3, 3), float32] */, Primitive=1, hash="861a0a021557e9e3", src_layout="OIHW", dst_layout="OIHW3i3o") -> Tensor[(1, 1, 3, 3, 3, 3), float32] {
    %3 = expand_dims(%p03, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
    %4 = squeeze(%3, axis=[1, 2]) /* ty=Tensor[(3), float32] */;
    %5 = expand_dims(%4, axis=1, num_newaxis=3) /* ty=Tensor[(3, 1, 1, 1), float32] */;
    %6 = multiply(%p11, %5) /* ty=Tensor[(3, 3, 3, 3), float32] */;
    layout_transform(%6, src_layout="OIHW", dst_layout="OIHW3i3o") /* ty=Tensor[(1, 1, 3, 3, 3, 3), float32] */
  } /* ty=fn (Tensor[(3), float32], Tensor[(3, 3, 3, 3), float32]) -> Tensor[(1, 1, 3, 3, 3, 3), float32] */;
  %17 = fn (%p05: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p13: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p21: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, Primitive=1, hash="4a93306f27aab36e", src_layout="NCHW", dst_layout="NCHW3c") -> Tensor[(1, 1, 1, 1, 3), float32] {
    %12 = negative(%p05) /* ty=Tensor[(3), float32] */;
    %13 = multiply(%12, %p13) /* ty=Tensor[(3), float32] */;
    %14 = add(%13, %p21) /* ty=Tensor[(3), float32] */;
    %15 = expand_dims(%14, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
    %16 = expand_dims(%15, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
    layout_transform(%16, src_layout="NCHW", dst_layout="NCHW3c") /* ty=Tensor[(1, 1, 1, 1, 3), float32] */
  } /* ty=fn (Tensor[(3), float32], Tensor[(3), float32], Tensor[(3), float32]) -> Tensor[(1, 1, 1, 1, 3), float32] */;
  %18 = %2(%data) /* ty=Tensor[(2, 1, 16, 16, 3), float32] */;
  %19 = %11(%10, %graph_conv_weight) /* ty=Tensor[(1, 1, 3, 3, 3, 3), float32] */;
  %20 = %17(%graph_bn_moving_mean, %10, %graph_bn_beta) /* ty=Tensor[(1, 1, 1, 1, 3), float32] */;
  %21 = fn (%p01: Tensor[(2, 1, 16, 16, 3), float32] /* ty=Tensor[(2, 1, 16, 16, 3), float32] */, %p1: Tensor[(1, 1, 3, 3, 3, 3), float32] /* ty=Tensor[(1, 1, 3, 3, 3, 3), float32] */, %p2: Tensor[(1, 1, 1, 1, 3), float32] /* ty=Tensor[(1, 1, 1, 1, 3), float32] */, Primitive=1, hash="20fa16e10d2f1255", kernel_layout="OIHW3i3o", data_layout="NCHW3c", out_layout="NCHW3c") -> Tensor[(2, 1, 8, 8, 3), float32] {
    %0 = nn.contrib_conv2d_NCHWc(%p01, %p1, strides=[2, 2], padding=[1, 1, 1, 1], channels=3, kernel_size=[3, 3], data_layout="NCHW3c", kernel_layout="OIHW3i3o", out_layout="NCHW3c") /* ty=Tensor[(2, 1, 8, 8, 3), float32] */;
    %1 = add(%0, %p2) /* ty=Tensor[(2, 1, 8, 8, 3), float32] */;
    nn.relu(%1) /* ty=Tensor[(2, 1, 8, 8, 3), float32] */
  } /* ty=fn (Tensor[(2, 1, 16, 16, 3), float32], Tensor[(1, 1, 3, 3, 3, 3), float32], Tensor[(1, 1, 1, 1, 3), float32]) -> Tensor[(2, 1, 8, 8, 3), float32] */;
  %22 = %21(%18, %19, %20) /* ty=Tensor[(2, 1, 8, 8, 3), float32] */;
  %23 = fn (%p0: Tensor[(2, 1, 8, 8, 3), float32] /* ty=Tensor[(2, 1, 8, 8, 3), float32] */, Primitive=1, hash="df9ecbef13647c69", src_layout="NCHW3c", dst_layout="NCHW") -> Tensor[(2, 3, 8, 8), float32] {
    layout_transform(%p0, src_layout="NCHW3c", dst_layout="NCHW") /* ty=Tensor[(2, 3, 8, 8), float32] */
  } /* ty=fn (Tensor[(2, 1, 8, 8, 3), float32]) -> Tensor[(2, 3, 8, 8), float32] */;
  %23(%22) /* ty=Tensor[(2, 3, 8, 8), float32] */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "VirtualDevice"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "14", 
        "target": "4", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "11", 
        "features": "12", 
        "host": "13", 
        "keys": "10", 
        "kind": "5", 
        "tag": "9"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "7", 
        "name": "6"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "11", 
        "features": "12", 
        "host": "0", 
        "keys": "10", 
        "kind": "5", 
        "tag": "9"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [], 
  "attrs": {"tvm_version": "0.12.dev0"}
}