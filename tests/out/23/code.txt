#[version = "0.0.5"]
def @main(%pzx: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %px1: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %px2: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %px3: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %px4: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %px5: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %px6: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %px7: Tensor[(4, 1), float32] /* ty=Tensor[(4, 1), float32] */) -> (Tensor[(64, 4, 1), float32],) {
  %0 = add(meta[relay.Constant][1] /* ty=Tensor[(64), float32] span=from_string:3:17 */, %pzx) /* ty=Tensor[(64), float32] span=from_string:4:43 */;
  %1 = multiply(meta[relay.Constant][0] /* ty=Tensor[(64), float32] span=from_string:4:23 */, %0) /* ty=Tensor[(64), float32] span=from_string:5:7 */;
  %2 = add(%1, meta[relay.Constant][2] /* ty=Tensor[(64), float32] span=from_string:5:16 */) /* ty=Tensor[(64), float32] span=from_string:3:3 */;
  %3 = tanh(%2) /* ty=Tensor[(64), float32] span=from_string:4:14 */;
  %4 = tan(%3) /* ty=Tensor[(64), float32] span=from_string:5:18 */;
  %5 = reshape(%4, newshape=[64, 1]) /* ty=Tensor[(64, 1), float32] span=from_string:6:24 */;
  %6 = nn.batch_norm(%5, %px1, %px2, %px3, %px4, center=False, scale=False) /* ty=(Tensor[(64, 1), float32], Tensor[(1), float32], Tensor[(1), float32]) span=from_string:9:10 */;
  %7 = %6.0 /* ty=Tensor[(64, 1), float32] span=from_string:10:18 */;
  %8 = add(%7, %7) /* ty=Tensor[(64, 1), float32] span=from_string:13:15 */;
  %9 = nn.leaky_relu(%8, alpha=0.083677f) /* ty=Tensor[(64, 1), float32] span=from_string:12:15 */;
  %10 = abs(%8) /* ty=Tensor[(64, 1), float32] span=from_string:14:25 */;
  %11 = nn.group_norm(%10, %px5, %px6, num_groups=1, center=False, scale=False) /* ty=Tensor[(64, 1), float32] span=from_string:15:20 */;
  %12 = nn.dense(%11, %px7, units=4) /* ty=Tensor[(64, 4), float32] span=from_string:16:19 */;
  %13 = nn.relu(%12) /* ty=Tensor[(64, 4), float32] span=from_string:17:18 */;
  %14 = ceil(%9) /* ty=Tensor[(64, 1), float32] span=from_string:18:21 */;
  %15 = mean(%13, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] span=from_string:18:25 */;
  %16 = multiply(%14, %15) /* ty=Tensor[(64, 1), float32] span=from_string:19:25 */;
  %17 = nn.leaky_relu(%16, alpha=0.55317f) /* ty=Tensor[(64, 1), float32] span=from_string:20:20 */;
  %18 = negative(%17) /* ty=Tensor[(64, 1), float32] span=from_string:21:19 */;
  %19 = reshape(%18, newshape=[64, 1]) /* ty=Tensor[(64, 1), float32] span=from_string:22:22 */;
  %20 = nn.softmax(%19, axis=1) /* ty=Tensor[(64, 1), float32] span=from_string:23:23 */;
  %21 = expand_dims(%20, axis=1) /* ty=Tensor[(64, 1, 1), float32] span=from_string:25:39 */;
  %22 = tanh(%21) /* ty=Tensor[(64, 1, 1), float32] span=from_string:25:29 */;
  %23 = (%22, %22, %21, %21) /* ty=(Tensor[(64, 1, 1), float32], Tensor[(64, 1, 1), float32], Tensor[(64, 1, 1), float32], Tensor[(64, 1, 1), float32]) span=from_string:25:23 */;
  %24 = concatenate(%23, axis=1) /* ty=Tensor[(64, 4, 1), float32] span=from_string:26:6 */;
  (%24,) /* ty=(Tensor[(64, 4, 1), float32],) span=from_string:3:5 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.Constant"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [3, 11, 16]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "8", 
        "data": "0", 
        "span": "6", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "5", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "23", 
        "end_column": "41", 
        "end_line": "4", 
        "line": "4", 
        "source_name": "7"
      }
    }, 
    {
      "type_key": "SourceName", 
      "repr_str": "from_string"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "9", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [10]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "13", 
        "data": "1", 
        "span": "12", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "17", 
        "end_column": "35", 
        "end_line": "3", 
        "line": "3", 
        "source_name": "7"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "14", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [15]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "18", 
        "data": "2", 
        "span": "17", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "16", 
        "end_column": "34", 
        "end_line": "5", 
        "line": "5", 
        "source_name": "7"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "19", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [20]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQBAAAAAAAAAAAABAAAAAAAArukZP7DrMz8hZxc/tisrPxfYoz31zxQ/K8tWPw1nDz+9RNw+5qFBP2YCSz4EfM4+4r+SPm5dyT7hKZc+2vUjPwJJgTtcom0/zKtbP/ZXCD/l4Dk/yZ6hPVn2nD74kUQ+xd6vPkVb+j7HvAo+e2CcPrXtej/h9e8+rIswPxolFj8DVEs/9rUeP9fpQz42IlI+114wPtx68z5N0cw+6Ts9P8OyGD/W2CU/vwqKPijNBz8Ns04+rhGpPi+8Kj30lZA+F9k6P1oXSj+AzYo+zRCNPReYgjwjoVc/+m6IPoMYRj+IjRc+c5jlPVhpkz4S5KI82EROPvDn/z62GDY/BRzCPQ==", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQBAAAAAAAAAAAABAAAAAAAAykikPrfLnz1FD4k90d+qPvGw/jzlKNg8Az5XPmUSJD8lEGY/sFsDP1KQbT9Jw3w/dtv9PgUsnD1D2nw/2Ps8PTHIVT8dvxY/IkuPPrBd8D7I4WM/vH95PkqGpz1/8LE+BGonPx0xXD9Kjvk+NjJCP6Y+4T2h9yE/8e8vPuyheD9Vwl0+pbanPkYIvTyqMb0+udTLPgLLLD/4XQU+Vg3APRVJsT04/sc+tb1sP/RGCD8yCg8/jPRgPz7fzT7jhlQ/ptq7Pt2VTz5XJXk+YtURP7qZ+j4I8DE/VHpPP0rhaj4x7B0/ywQPPzSh2z5V9sc+ufYkPuW29z2wQ649FDqePg==", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQBAAAAAAAAAAAABAAAAAAAA4aZQP/E9cD7nFgU/P6NrP5WOWj82yU0/huZkP9aVyz6r6dc+8D4qP9/wHz+ACHA/9o50PsaKxj7ixNw7POhxPeZJYD5wTtA+A1ZuP0dfAj+anMM9RuylPgc+sT5jWqU+dOB6P1Z97D5LmKE+XcHnPch0vz6lItE9/h9OPyAJGD8/xQ4+zTetPb/QWj+Ek2o+NoI8Py5DVz9sxVI/kcl3PtLZJT/UFRg/KwdhP0wqNj5n5GA/ZoXlPletOD+mMjs/583aPr2gLT2KEak+SlOfPqGsQz/cDU4/VgOhPlAEIj/E04A+W+sNPzNR9T7swl8/67o/P8DPxj5tSME923RWPw=="
  ], 
  "attrs": {"tvm_version": "0.12.dev0"}
}