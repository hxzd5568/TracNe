Fixed


**************************************************
fixed method: Targeted repair


**************************************************
After repairing, error prone input's mean relatively error is: 0.0000000391


**************************************************
After repairing, mean relatively error is: 0.0000000000


**************************************************
The best recommendation:

#[version = "0.0.5"]
def @main(%pzx: Tensor[(64), float32] /* ty=Tensor[(64), float32] span=from_string:17:13 */, %px1: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %px2: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %px3: Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:17:184 */, %px4: Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:17:178 */, %px5: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %px6: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %px7: Tensor[(4, 1), float32] /* ty=Tensor[(4, 1), float32] span=from_string:42:13 */, hash="f72334d7bb901049", src_layout="NC", dst_layout="NC4n") -> (Tensor[(64, 4, 1), float32],) {
  %0 = multiply(%pzx, meta[relay.Constant][0] /* ty=Tensor[(64), float32] span=from_string:17:24 */) /* ty=Tensor[(64), float32] span=from_string:5:15 */;
  %1 = add(%0, meta[relay.Constant][1] /* ty=Tensor[(64), float32] span=from_string:17:103 */) /* ty=Tensor[(64), float32] span=from_string:6:21 */;
  %2 = fast_tanh(%1) /* ty=Tensor[(64), float32] span=from_string:7:15 */;
  %3 = tan(%2) /* ty=Tensor[(64), float32] span=from_string:9:19 */;
  %4 = add(%px4, 1e-05f /* ty=float32 span=from_string:8:26 */) /* ty=Tensor[(1), float32] span=from_string:10:17 */;
  %5 = reshape(%3, newshape=[64, 1]) /* ty=Tensor[(64, 1), float32] span=from_string:12:21 */;
  %6 = rsqrt(%4) /* ty=Tensor[(1), float32] span=from_string:13:26 */;
  %7 = negative(%px3) /* ty=Tensor[(1), float32] span=from_string:13:21 */;
  %8 = multiply(%5, %6) /* ty=Tensor[(64, 1), float32] span=from_string:14:15 */;
  %9 = multiply(%7, %6) /* ty=Tensor[(1), float32] span=from_string:14:20 */;
  %10 = add(%8, %9) /* ty=Tensor[(64, 1), float32] span=from_string:15:15 */;
  %11 = multiply(%10, 2f /* ty=float32 span=from_string:15:22 */) /* ty=Tensor[(64, 1), float32] span=from_string:4:5 */;
  %12 = nn.leaky_relu(%11, alpha=0.083677f) /* ty=Tensor[(64, 1), float32] span=from_string:54:15 */;
  %13 = abs(%11) /* ty=Tensor[(64, 1), float32] span=from_string:20:13 */;
  %14 = reshape(%13, newshape=[64, 1, 1]) /* ty=Tensor[(64, 1, 1), float32] span=from_string:19:5 */;
  %15 = mean(%14, axis=[2], keepdims=True) /* ty=Tensor[(64, 1, 1), float32] span=from_string:24:7 */;
  %16 = variance(%14, %15, axis=[2], keepdims=True) /* ty=Tensor[(64, 1, 1), float32] span=from_string:28:5 */;
  %17 = add(%16, 1e-05f /* ty=float32 span=from_string:32:27 */) /* ty=Tensor[(64, 1, 1), float32] span=from_string:34:17 */;
  %18 = subtract(%14, %15) /* ty=Tensor[(64, 1, 1), float32] span=from_string:35:21 */;
  %19 = rsqrt(%17) /* ty=Tensor[(64, 1, 1), float32] span=from_string:35:26 */;
  %20 = multiply(%18, %19) /* ty=Tensor[(64, 1, 1), float32] span=from_string:36:13 */;
  %21 = reshape(%20, newshape=[64, 1]) /* ty=Tensor[(64, 1), float32] span=from_string:32:5 */;
  %22 = layout_transform(%px7, src_layout="NC", dst_layout="NC4n") /* ty=Tensor[(1, 1, 4), float32] span=from_string:39:5 */;
  %23 = nn.contrib_dense_pack(%21, %22, meta[relay.attrs.DensePackAttrs][0]) /* ty=Tensor[(64, 4), float32] span=from_string:45:13 */;
  %24 = nn.relu(%23) /* ty=Tensor[(64, 4), float32] span=from_string:44:5 */;
  %25 = ceil(%12) /* ty=Tensor[(64, 1), float32] span=from_string:55:20 */;
  %26 = mean(%24, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] span=from_string:49:7 */;
  %27 = multiply(%25, %26) /* ty=Tensor[(64, 1), float32] span=from_string:56:24 */;
  %28 = nn.leaky_relu(%27, alpha=0.55317f) /* ty=Tensor[(64, 1), float32] span=from_string:57:19 */;
  %29 = negative(%28) /* ty=Tensor[(64, 1), float32] span=from_string:58:13 */;
  %30 = reshape(%29, newshape=[64, 1]) /* ty=Tensor[(64, 1), float32] span=from_string:53:5 */;
  %31 = nn.fast_softmax(%30, axis=1) /* ty=Tensor[(64, 1), float32] span=from_string:62:5 */;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(64, 1), float64] span=from_string:67:20 */;
  %33 = expand_dims(%32, axis=1) /* ty=Tensor[(64, 1, 1), float64] span=from_string:69:21 */;
  %34 = fast_tanh(%33) /* ty=Tensor[(64, 1, 1), float64] span=from_string:69:13 */;
  %35 = (%34, %34, %33, %33) /* ty=(Tensor[(64, 1, 1), float64], Tensor[(64, 1, 1), float64], Tensor[(64, 1, 1), float64], Tensor[(64, 1, 1), float64]) span=from_string:70:20 */;
  %36 = concatenate(%35, axis=1) /* ty=Tensor[(64, 4, 1), float64] span=from_string:71:8 */;
  %37 = cast(%36, dtype="float32") /* ty=Tensor[(64, 4, 1), float32] span=from_string:66:3 */;
  (%37,) /* ty=(Tensor[(64, 4, 1), float32],) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1,
  "nodes": [
    {
      "type_key": ""
    },
    {
      "type_key": "Map",
      "keys": [
        "relay.attrs.DensePackAttrs",
        "relay.Constant"
      ],
      "data": [2, 5]
    },
    {
      "type_key": "Array",
      "data": [3]
    },
    {
      "type_key": "relay.attrs.DensePackAttrs",
      "attrs": {
        "out_dtype": "float32",
        "units": "0",
        "weight_layout": "4"
      }
    },
    {
      "type_key": "runtime.String",
      "repr_str": "NC4n"
    },
    {
      "type_key": "Array",
      "data": [6, 14]
    },
    {
      "type_key": "relay.Constant",
      "attrs": {
        "_checked_type_": "11",
        "data": "0",
        "span": "9",
        "virtual_device_": "7"
      }
    },
    {
      "type_key": "VirtualDevice",
      "attrs": {
        "device_type_int": "-1",
        "memory_scope": "8",
        "target": "0",
        "virtual_device_id": "-1"
      }
    },
    {
      "type_key": "runtime.String"
    },
    {
      "type_key": "Span",
      "attrs": {
        "column": "24",
        "end_column": "42",
        "end_line": "17",
        "line": "17",
        "source_name": "10"
      }
    },
    {
      "type_key": "SourceName",
      "repr_str": "from_string"
    },
    {
      "type_key": "relay.TensorType",
      "attrs": {
        "dtype": "float32",
        "shape": "12",
        "span": "0"
      }
    },
    {
      "type_key": "Array",
      "data": [13]
    },
    {
      "type_key": "IntImm",
      "attrs": {
        "dtype": "int32",
        "span": "0",
        "value": "64"
      }
    },
    {
      "type_key": "relay.Constant",
      "attrs": {
        "_checked_type_": "18",
        "data": "1",
        "span": "17",
        "virtual_device_": "15"
      }
    },
    {
      "type_key": "VirtualDevice",
      "attrs": {
        "device_type_int": "-1",
        "memory_scope": "16",
        "target": "0",
        "virtual_device_id": "-1"
      }
    },
    {
      "type_key": "runtime.String"
    },
    {
      "type_key": "Span",
      "attrs": {
        "column": "103",
        "end_column": "121",
        "end_line": "17",
        "line": "17",
        "source_name": "10"
      }
    },
    {
      "type_key": "relay.TensorType",
      "attrs": {
        "dtype": "float32",
        "shape": "19",
        "span": "0"
      }
    },
    {
      "type_key": "Array",
      "data": [20]
    },
    {
      "type_key": "IntImm",
      "attrs": {
        "dtype": "int32",
        "span": "0",
        "value": "64"
      }
    }
  ],
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQBAAAAAAAAAAAABAAAAAAAArukZP7DrMz8hZxc/tisrPxfYoz31zxQ/K8tWPw1nDz+9RNw+5qFBP2YCSz4EfM4+4r+SPm5dyT7hKZc+2vUjPwJJgTtcom0/zKtbP/ZXCD/l4Dk/yZ6hPVn2nD74kUQ+xd6vPkVb+j7HvAo+e2CcPrXtej/h9e8+rIswPxolFj8DVEs/9rUeP9fpQz42IlI+114wPtx68z5N0cw+6Ts9P8OyGD/W2CU/vwqKPijNBz8Ns04+rhGpPi+8Kj30lZA+F9k6P1oXSj+AzYo+zRCNPReYgjwjoVc/+m6IPoMYRj+IjRc+c5jlPVhpkz4S5KI82EROPvDn/z62GDY/BRzCPQ==",
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQBAAAAAAAAAAAABAAAAAAAAzgSBP5wylD7OOA8/y2GSP5cxWz9wtlE/WAaJPz2zQT+o7k4/Ec2GP8oJTz8m/Ko/MwrDPrjl1T4vwZg+Cnm1PZ2pYz7BFXQ/XeiVP3VhQj/u6T0/h8SvPugUvj7Jgsc+BDGaP+bpYT/6Z8M+IJCwPt2m9j5pGsw+O3VsPwTulD+Qc58+4keTPhPyWz/EHJw+7g9OP3+3lD/pG2A/e2KfPrgRMz/03Vg/om2QP2iq6z73w30/MAs9P8T3PD/UNnc/CPUxP19HTz4S18o+UGqzPv2rRT8697E/IssHP390Tz+Ukq8+6vMdP5ZGGj/cv2E/mQlIP7TD5T6vnh4+cPRdPw=="
  ],
  "attrs": {"tvm_version": "0.12.dev0"}
}


**************************************************
The repair subgraph:

#[version = "0.0.5"]
def @main(%p0: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] span=from_string:3:13 */) -> Tensor[(64, 4, 1), float32] {
  %0 = cast(%p0, dtype="float64") /* ty=Tensor[(64, 1), float64] span=from_string:4:20 */;
  %1 = expand_dims(%0, axis=1) /* ty=Tensor[(64, 1, 1), float64] span=from_string:6:21 */;
  %2 = fast_tanh(%1) /* ty=Tensor[(64, 1, 1), float64] span=from_string:6:13 */;
  %3 = (%2, %2, %1, %1) /* ty=(Tensor[(64, 1, 1), float64], Tensor[(64, 1, 1), float64], Tensor[(64, 1, 1), float64], Tensor[(64, 1, 1), float64]) span=from_string:7:20 */;
  %4 = concatenate(%3, axis=1) /* ty=Tensor[(64, 4, 1), float64] span=from_string:8:8 */;
  cast(%4, dtype="float32") /* ty=Tensor[(64, 4, 1), float32] span=from_string:3:3 */
}
