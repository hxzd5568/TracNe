

********opt5**************************************************

def @main(%nzx : Tensor[(3, 4, 4), float16] /* ty=Tensor[(3, 4, 4), float16] span=from_string:5:15 */, %nzv : Tensor[(3, 4, 4), float16] /* ty=Tensor[(3, 4, 4), float16] span=from_string:3:12 */, hash="a11c5dff22abbe38", ) -> (Tensor[(3, 1, 1), float16],) {
  %9 = fn (%p03: Tensor[(3, 4, 4), float16] /* ty=Tensor[(3, 4, 4), float16] */, %p1: Tensor[(3, 4, 4), float16] /* ty=Tensor[(3, 4, 4), float16] */, Primitive=1, hash="6897eee9f3a1867c") -> Tensor[(3, 4, 4), float16] {
    %7 = abs(%p03) /* ty=Tensor[(3, 4, 4), float16] */;
    %8 = rsqrt(%7) /* ty=Tensor[(3, 4, 4), float16] */;
    multiply(%p1, %8) /* ty=Tensor[(3, 4, 4), float16] */
  } /* ty=fn (Tensor[(3, 4, 4), float16], Tensor[(3, 4, 4), float16]) -> Tensor[(3, 4, 4), float16] */;
  %10 = %9(%nzv, %nzx) /* ty=Tensor[(3, 4, 4), float16] */;
  %11 = fn (%p02: Tensor[(3, 4, 4), float16] /* ty=Tensor[(3, 4, 4), float16] */, Primitive=1, hash="de936b1e6256c93f", layout="NCW", out_layout="") -> Tensor[(3, 4, 2), float16] {
    %5 = nn.avg_pool1d(%p02, pool_size=[3], strides=[2], padding=[0, 1], ceil_mode=True) /* ty=Tensor[(3, 4, 2), float16] */;
    %6 = sin(%5) /* ty=Tensor[(3, 4, 2), float16] */;
    fast_exp(%6) /* ty=Tensor[(3, 4, 2), float16] */
  } /* ty=fn (Tensor[(3, 4, 4), float16]) -> Tensor[(3, 4, 2), float16] */;
  %12 = %11(%10) /* ty=Tensor[(3, 4, 2), float16] */;
  %13 = fn (%p01: Tensor[(3, 4, 2), float16] /* ty=Tensor[(3, 4, 2), float16] */, Primitive=1, hash="34e85bf1c9671cb5") -> Tensor[(3, 1, 1), float16] {
    sum(%p01, axis=[1, 2], keepdims=True) /* ty=Tensor[(3, 1, 1), float16] */
  } /* ty=fn (Tensor[(3, 4, 2), float16]) -> Tensor[(3, 1, 1), float16] */;
  %14 = %13(%12) /* ty=Tensor[(3, 1, 1), float16] */;
  %15 = fn (%p0: Tensor[(3, 1, 1), float16] /* ty=Tensor[(3, 1, 1), float16] */, Primitive=1, hash="2ba7c867a5885179") -> Tensor[(3, 1, 1), float16] {
    %0 = maximum(%p0, %p0) /* ty=Tensor[(3, 1, 1), float16] */;
    %1 = tan(%0) /* ty=Tensor[(3, 1, 1), float16] */;
    %2 = sigmoid(%1) /* ty=Tensor[(3, 1, 1), float16] */;
    %3 = fast_exp(%2) /* ty=Tensor[(3, 1, 1), float16] */;
    %4 = nn.leaky_relu(%3, alpha=0.955863f) /* ty=Tensor[(3, 1, 1), float16] */;
    cos(%4) /* ty=Tensor[(3, 1, 1), float16] */
  } /* ty=fn (Tensor[(3, 1, 1), float16]) -> Tensor[(3, 1, 1), float16] */;
  %16 = %15(%14) /* ty=Tensor[(3, 1, 1), float16] */;
  (%16,) /* ty=(Tensor[(3, 1, 1), float16],) span=from_string:3:3 */
}



********opt1**************************************************

def @main(%nzx : Tensor[(3, 4, 4), float16] /* ty=Tensor[(3, 4, 4), float16] span=from_string:5:15 */, %nzv : Tensor[(3, 4, 4), float16] /* ty=Tensor[(3, 4, 4), float16] span=from_string:3:12 */, hash="7b6da3ac6c7045df", ) -> (Tensor[(3, 1, 1), float16],) {
  %9 = fn (%p03: Tensor[(3, 4, 4), float16] /* ty=Tensor[(3, 4, 4), float16] */, %p1: Tensor[(3, 4, 4), float16] /* ty=Tensor[(3, 4, 4), float16] */, Primitive=1, hash="6897eee9f3a1867c") -> Tensor[(3, 4, 4), float16] {
    %7 = abs(%p03) /* ty=Tensor[(3, 4, 4), float16] */;
    %8 = rsqrt(%7) /* ty=Tensor[(3, 4, 4), float16] */;
    multiply(%p1, %8) /* ty=Tensor[(3, 4, 4), float16] */
  } /* ty=fn (Tensor[(3, 4, 4), float16], Tensor[(3, 4, 4), float16]) -> Tensor[(3, 4, 4), float16] */;
  %10 = %9(%nzv, %nzx) /* ty=Tensor[(3, 4, 4), float16] */;
  %11 = fn (%p02: Tensor[(3, 4, 4), float16] /* ty=Tensor[(3, 4, 4), float16] */, Primitive=1, hash="048796ebf3975f66", layout="NCW", out_layout="") -> Tensor[(3, 4, 2), float16] {
    %5 = nn.avg_pool1d(%p02, pool_size=[3], strides=[2], padding=[0, 1], ceil_mode=True) /* ty=Tensor[(3, 4, 2), float16] */;
    %6 = sin(%5) /* ty=Tensor[(3, 4, 2), float16] */;
    exp(%6) /* ty=Tensor[(3, 4, 2), float16] */
  } /* ty=fn (Tensor[(3, 4, 4), float16]) -> Tensor[(3, 4, 2), float16] */;
  %12 = %11(%10) /* ty=Tensor[(3, 4, 2), float16] */;
  %13 = fn (%p01: Tensor[(3, 4, 2), float16] /* ty=Tensor[(3, 4, 2), float16] */, Primitive=1, hash="34e85bf1c9671cb5") -> Tensor[(3, 1, 1), float16] {
    sum(%p01, axis=[1, 2], keepdims=True) /* ty=Tensor[(3, 1, 1), float16] */
  } /* ty=fn (Tensor[(3, 4, 2), float16]) -> Tensor[(3, 1, 1), float16] */;
  %14 = %13(%12) /* ty=Tensor[(3, 1, 1), float16] */;
  %15 = fn (%p0: Tensor[(3, 1, 1), float16] /* ty=Tensor[(3, 1, 1), float16] */, Primitive=1, hash="f8262b4b410a29fe") -> Tensor[(3, 1, 1), float16] {
    %0 = maximum(%p0, %p0) /* ty=Tensor[(3, 1, 1), float16] */;
    %1 = tan(%0) /* ty=Tensor[(3, 1, 1), float16] */;
    %2 = sigmoid(%1) /* ty=Tensor[(3, 1, 1), float16] */;
    %3 = exp(%2) /* ty=Tensor[(3, 1, 1), float16] */;
    %4 = nn.leaky_relu(%3, alpha=0.955863f) /* ty=Tensor[(3, 1, 1), float16] */;
    cos(%4) /* ty=Tensor[(3, 1, 1), float16] */
  } /* ty=fn (Tensor[(3, 1, 1), float16]) -> Tensor[(3, 1, 1), float16] */;
  %16 = %15(%14) /* ty=Tensor[(3, 1, 1), float16] */;
  (%16,) /* ty=(Tensor[(3, 1, 1), float16],) span=from_string:3:3 */
}
