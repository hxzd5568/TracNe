#[version = "0.0.5"]
def @main(%pzx: Tensor[(2, 4, 40, 10, 10), float32] /* ty=Tensor[(2, 4, 40, 10, 10), float32] */, %pzweight: Tensor[(2, 4, 3, 3, 3), float32] /* ty=Tensor[(2, 4, 3, 3, 3), float32] */, %pzin_bias: Tensor[(4, 1, 1, 1), float32] /* ty=Tensor[(4, 1, 1, 1), float32] */, %px1: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px2: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px3: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px4: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px5: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px6: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px7: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px8: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px9: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px10: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %px11: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %px12: Tensor[(1), float32] /* ty=Tensor[(1), float32] */) -> (Tensor[(2, 20), float32],) {
  %0 = multiply(%pzx, meta[relay.Constant][0] /* ty=Tensor[(4, 1, 1, 1), float32] span=from_string:3:27 */) /* ty=Tensor[(2, 4, 40, 10, 10), float32] span=from_string:4:16 */;
  %1 = nn.relu(%0) /* ty=Tensor[(2, 4, 40, 10, 10), float32] span=from_string:5:12 */;
  %2 = add(%1, %pzin_bias) /* ty=Tensor[(2, 4, 40, 10, 10), float32] span=from_string:6:18 */;
  %3 = nn.conv3d(%2, %pzweight, padding=[1, 1, 1, 1, 1, 1], channels=2, kernel_size=[3, 3, 3]) /* ty=Tensor[(2, 2, 40, 10, 10), float32] span=from_string:7:7 */;
  %4 = sum(%3, axis=[-1, -3]) /* ty=Tensor[(2, 2, 10), float32] span=from_string:3:3 */;
  %5 = expand_dims(%4, axis=2, num_newaxis=0) /* ty=Tensor[(2, 2, 10), float32] span=from_string:15:20 */;
  %6 = sin(%5) /* ty=Tensor[(2, 2, 10), float32] span=from_string:5:24 */;
  %7 = nn.batch_norm(%6, %px3, %px4, %px5, %px6, center=False) /* ty=(Tensor[(2, 2, 10), float32], Tensor[(2), float32], Tensor[(2), float32]) span=from_string:8:10 */;
  %8 = %7.0 /* ty=Tensor[(2, 2, 10), float32] span=from_string:10:14 */;
  %9 = nn.instance_norm(%4, %px1, %px2) /* ty=Tensor[(2, 2, 10), float32] span=from_string:24:25 */;
  %10 = add(%8, %9) /* ty=Tensor[(2, 2, 10), float32] span=from_string:11:24 */;
  %11 = nn.batch_norm(%10, %px7, %px8, %px9, %px10, center=False, scale=False) /* ty=(Tensor[(2, 2, 10), float32], Tensor[(2), float32], Tensor[(2), float32]) span=from_string:14:11 */;
  %12 = %11.0 /* ty=Tensor[(2, 2, 10), float32] span=from_string:15:24 */;
  %13 = minimum(%5, %12) /* ty=Tensor[(2, 2, 10), float32] span=from_string:16:15 */;
  %14 = cos(%13) /* ty=Tensor[(2, 2, 10), float32] span=from_string:23:25 */;
  %15 = sum(%14, axis=[1], keepdims=True) /* ty=Tensor[(2, 1, 10), float32] span=from_string:22:25 */;
  %16 = nn.layer_norm(%15, %px11, %px12, axis=1, scale=False) /* ty=Tensor[(2, 1, 10), float32] span=from_string:19:16 */;
  %17 = ceil(%16) /* ty=Tensor[(2, 1, 10), float32] span=from_string:20:15 */;
  %18 = abs(%17) /* ty=Tensor[(2, 1, 10), float32] span=from_string:21:20 */;
  %19 = negative(%18) /* ty=Tensor[(2, 1, 10), float32] span=from_string:22:20 */;
  %20 = minimum(%19, %15) /* ty=Tensor[(2, 1, 10), float32] span=from_string:23:20 */;
  %21 = minimum(%20, %14) /* ty=Tensor[(2, 2, 10), float32] span=from_string:24:20 */;
  %22 = subtract(%21, %9) /* ty=Tensor[(2, 2, 10), float32] span=from_string:25:28 */;
  %23 = nn.batch_flatten(%22) /* ty=Tensor[(2, 20), float32] span=from_string:26:19 */;
  %24 = nn.relu(%23) /* ty=Tensor[(2, 20), float32] span=from_string:27:20 */;
  %25 = add(%24, %24) /* ty=Tensor[(2, 20), float32] span=from_string:28:15 */;
  %26 = tan(%25) /* ty=Tensor[(2, 20), float32] span=from_string:29:6 */;
  (%26,) /* ty=(Tensor[(2, 20), float32],) span=from_string:3:5 */
}

#[metadata]
{
  "root": 1,
  "nodes": [
    {
      "type_key": ""
    },
    {
      "type_key": "Map",
      "keys": [
        "relay.Constant"
      ],
      "data": [2]
    },
    {
      "type_key": "Array",
      "data": [3]
    },
    {
      "type_key": "relay.Constant",
      "attrs": {
        "_checked_type_": "8",
        "data": "0",
        "span": "6",
        "virtual_device_": "4"
      }
    },
    {
      "type_key": "VirtualDevice",
      "attrs": {
        "device_type_int": "-1",
        "memory_scope": "5",
        "target": "0",
        "virtual_device_id": "-1"
      }
    },
    {
      "type_key": "runtime.String"
    },
    {
      "type_key": "Span",
      "attrs": {
        "column": "27",
        "end_column": "45",
        "end_line": "3",
        "line": "3",
        "source_name": "7"
      }
    },
    {
      "type_key": "SourceName",
      "repr_str": "from_string"
    },
    {
      "type_key": "relay.TensorType",
      "attrs": {
        "dtype": "float32",
        "shape": "9",
        "span": "0"
      }
    },
    {
      "type_key": "Array",
      "data": [10, 11, 12, 13]
    },
    {
      "type_key": "IntImm",
      "attrs": {
        "dtype": "int32",
        "span": "0",
        "value": "4"
      }
    },
    {
      "type_key": "IntImm",
      "attrs": {
        "dtype": "int32",
        "span": "0",
        "value": "1"
      }
    },
    {
      "type_key": "IntImm",
      "attrs": {
        "dtype": "int32",
        "span": "0",
        "value": "1"
      }
    },
    {
      "type_key": "IntImm",
      "attrs": {
        "dtype": "int32",
        "span": "0",
        "value": "1"
      }
    }
  ],
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAABAAAAAIgAQAEAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAABAAAAAAAAAA4x4hP1gtbj+wVCc/TYsMPw=="
  ],
  "attrs": {"tvm_version": "0.12.dev0"}
}
