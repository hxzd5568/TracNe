#[version = "0.0.5"]
def @main(%x0: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] span=from_string:40:16 */, %x1: Tensor[(10, 15), float32] /* ty=Tensor[(10, 15), float32] span=from_string:4:23 */, %x2: Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:28:28 */, %x3: Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:31:30 */, %x4: Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:31:35 */, %x5: Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:31:40 */, %x6: Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:31:45 */, %x7: Tensor[(12), float32] /* ty=Tensor[(12), float32] span=from_string:47:28 */, %x8: Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:21:30 */, %x9: Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:21:35 */) -> (Tensor[(12, 1, 1), float32], Tensor[(12, 29), float32]) {
  %0 = ceil(%x0) /* ty=Tensor[(12, 15), float32] span=from_string:4:19 */;
  %1 = nn.dense(%0, %x1, units=10) /* ty=Tensor[(12, 10), float32] span=from_string:14:21 */;
  %2 = nn.softmax(%1, axis=1) /* ty=Tensor[(12, 10), float32] span=from_string:6:18 */;
  %3 = reshape(%2, newshape=[12, 10]) /* ty=Tensor[(12, 10), float32] span=from_string:8:21 */;
  %4 = exp(%3) /* ty=Tensor[(12, 10), float32] span=from_string:8:17 */;
  %5 = divide(%4, %3) /* ty=Tensor[(12, 10), float32] span=from_string:9:21 */;
  %6 = nn.softmax(%5, axis=1) /* ty=Tensor[(12, 10), float32] span=from_string:10:14 */;
  %7 = abs(%6) /* ty=Tensor[(12, 10), float32] span=from_string:13:17 */;
  %8 = tanh(%7) /* ty=Tensor[(12, 10), float32] span=from_string:12:18 */;
  %9 = round(%7) /* ty=Tensor[(12, 10), float32] span=from_string:15:18 */;
  %10 = transpose(%1, axes=[0, 1]) /* ty=Tensor[(12, 10), float32] span=from_string:15:23 */;
  %11 = reshape(%8, newshape=[12, 1, 10]) /* ty=Tensor[(12, 1, 10), float32] span=from_string:38:15 */;
  %12 = divide(%9, %10) /* ty=Tensor[(12, 10), float32] span=from_string:16:19 */;
  %13 = add(%11, %12) /* ty=Tensor[(12, 12, 10), float32] span=from_string:17:15 */;
  %14 = sum(%13, axis=[1, 2], keepdims=True) /* ty=Tensor[(12, 1, 1), float32] span=from_string:24:15 */;
  %15 = nn.adaptive_max_pool1d(%14, output_size=[1]) /* ty=Tensor[(12, 1, 1), float32] span=from_string:19:21 */;
  %16 = transpose(%15, axes=[0, 1, 2]) /* ty=Tensor[(12, 1, 1), float32] span=from_string:20:20 */;
  %17 = negative(%16) /* ty=Tensor[(12, 1, 1), float32] span=from_string:21:25 */;
  %18 = nn.layer_norm(%17, %x8, %x9, axis=1, center=False) /* ty=Tensor[(12, 1, 1), float32] span=from_string:22:17 */;
  %19 = split(%18, indices_or_sections=[], axis=1) /* ty=(Tensor[(12, 1, 1), float32],) span=from_string:23:11 */;
  %20 = exp(%14) /* ty=Tensor[(12, 1, 1), float32] span=from_string:25:22 */;
  %21 = nn.softmax(%20, axis=1) /* ty=Tensor[(12, 1, 1), float32] span=from_string:26:15 */;
  %22 = abs(%21) /* ty=Tensor[(12, 1, 1), float32] span=from_string:27:22 */;
  %23 = nn.softmax(%22, axis=1) /* ty=Tensor[(12, 1, 1), float32] span=from_string:28:23 */;
  %24 = nn.bias_add(%23, %x2) /* ty=Tensor[(12, 1, 1), float32] span=from_string:29:16 */;
  %25 = max(%24, axis=[1], keepdims=True) /* ty=Tensor[(12, 1, 1), float32] span=from_string:30:25 */;
  %26 = strided_slice(%25, begin=[0], end=[1], strides=[1], axes=[2]) /* ty=Tensor[(12, 1, 1), float32] span=from_string:31:25 */;
  %27 = nn.batch_norm(%26, %x3, %x4, %x5, %x6, center=False, scale=False) /* ty=(Tensor[(12, 1, 1), float32], Tensor[(1), float32], Tensor[(1), float32]) span=from_string:34:11 */;
  %28 = %27.0 /* ty=Tensor[(12, 1, 1), float32] span=from_string:35:16 */;
  %29 = min(%28, axis=[2]) /* ty=Tensor[(12, 1), float32] span=from_string:36:15 */;
  %30 = tan(%29) /* ty=Tensor[(12, 1), float32] span=from_string:37:25 */;
  %31 = sum(%11, axis=[2], keepdims=True) /* ty=Tensor[(12, 1, 1), float32] span=from_string:39:26 */;
  %32 = tanh(%x0) /* ty=Tensor[(12, 15), float32] span=from_string:54:29 */;
  %33 = trunc(%32) /* ty=Tensor[(12, 15), float32] span=from_string:42:16 */;
  %34 = nn.max_pool1d(%31, pool_size=[3], dilation=[2], padding=[2, 2]) /* ty=Tensor[(12, 1, 1), float32] span=from_string:43:18 */;
  %35 = max(%33, axis=[1], keepdims=True) /* ty=Tensor[(12, 1), float32] span=from_string:54:39 */;
  %36 = divide(%34, %35) /* ty=Tensor[(12, 12, 1), float32] span=from_string:44:20 */;
  %37 = negative(%36) /* ty=Tensor[(12, 12, 1), float32] span=from_string:45:25 */;
  %38 = strided_slice(%37, begin=[0], end=[1], strides=[1], axes=[2]) /* ty=Tensor[(12, 12, 1), float32] span=from_string:46:28 */;
  %39 = nn.batch_flatten(%38) /* ty=Tensor[(12, 12), float32] span=from_string:47:23 */;
  %40 = nn.bias_add(%39, %x7) /* ty=Tensor[(12, 12), float32] span=from_string:48:15 */;
  %41 = nn.leaky_relu(%30, alpha=0.971295f) /* ty=Tensor[(12, 1), float32] span=from_string:54:34 */;
  %42 = cos(%40) /* ty=Tensor[(12, 12), float32] span=from_string:49:20 */;
  %43 = add(%41, %42) /* ty=Tensor[(12, 12), float32] span=from_string:50:19 */;
  %44 = nn.relu(%43) /* ty=Tensor[(12, 12), float32] span=from_string:51:21 */;
  %45 = transpose(%44, axes=[0, 1]) /* ty=Tensor[(12, 12), float32] span=from_string:52:16 */;
  %46 = ceil(%45) /* ty=Tensor[(12, 12), float32] span=from_string:53:15 */;
  %47 = exp(%46) /* ty=Tensor[(12, 12), float32] span=from_string:54:24 */;
  %48 = (%47, %32, %41, %35) /* ty=(Tensor[(12, 12), float32], Tensor[(12, 15), float32], Tensor[(12, 1), float32], Tensor[(12, 1), float32]) span=from_string:54:23 */;
  %49 = concatenate(%48, axis=1) /* ty=Tensor[(12, 29), float32] span=from_string:55:15 */;
  %50 = tan(%49) /* ty=Tensor[(12, 29), float32] span=from_string:56:21 */;
  %51 = %19.0 /* ty=Tensor[(12, 1, 1), float32] span=from_string:57:6 */;
  %52 = transpose(%50, axes=[0, 1]) /* ty=Tensor[(12, 29), float32] span=from_string:57:11 */;
  (%51, %52) /* ty=(Tensor[(12, 1, 1), float32], Tensor[(12, 29), float32]) span=from_string:3:5 */
}
