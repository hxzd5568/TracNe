Fixed


**************************************************
fixed method: Targeted repair


**************************************************
After repairing, error prone input's mean relatively error is: 0.0002074818


**************************************************
After repairing, mean relatively error is: 0.0000000000


**************************************************
The best recommendation:

#[version = "0.0.5"]
def @main(%x0: Tensor[(13, 13), float16] /* ty=Tensor[(13, 13), float16] span=from_string:11:13 */, %x1: Tensor[(26), float16] /* ty=Tensor[(26), float16] span=from_string:40:84 */, %x2: Tensor[(26), float16] /* ty=Tensor[(26), float16] span=from_string:40:89 */, hash="9ca35a8811233814") -> (Tensor[(13), float16],) {
  %0 = (%x0, %x0) /* ty=(Tensor[(13, 13), float16], Tensor[(13, 13), float16]) span=from_string:5:23 */;
  %1 = concatenate(%0, axis=1) /* ty=Tensor[(13, 26), float16] span=from_string:8:20 */;
  %2 = nn.relu(%1) /* ty=Tensor[(13, 26), float16] span=from_string:7:20 */;
  %3 = negative(%2) /* ty=Tensor[(13, 26), float16] span=from_string:8:15 */;
  %4 = add(%3, %1) /* ty=Tensor[(13, 26), float16] span=from_string:9:22 */;
  %5 = nn.batch_flatten(%4) /* ty=Tensor[(13, 26), float16] span=from_string:4:5 */;
  %6 = nn.fast_softmax(%5, axis=1) /* ty=Tensor[(13, 26), float16] span=from_string:13:5 */;
  %7 = mean(%6, axis=[1], keepdims=True) /* ty=Tensor[(13, 1), float16] span=from_string:17:7 */;
  %8 = cast(%6, dtype="float64") /* ty=Tensor[(13, 26), float64] span=from_string:30:17 */;
  %9 = cast(%7, dtype="float64") /* ty=Tensor[(13, 1), float64] span=from_string:30:21 */;
  %10 = variance(%6, %7, axis=[1], keepdims=True) /* ty=Tensor[(13, 1), float16] span=from_string:21:5 */;
  %11 = cast(%10, dtype="float64") /* ty=Tensor[(13, 1), float64] span=from_string:29:12 */;
  %12 = cast(1.00136e-05f16 /* ty=float16 span=from_string:40:42 */, dtype="float64") /* ty=float64 span=from_string:29:16 */;
  %13 = add(%11, %12) /* ty=Tensor[(13, 1), float64] span=from_string:31:14 */;
  %14 = subtract(%8, %9) /* ty=Tensor[(13, 26), float64] span=from_string:32:18 */;
  %15 = rsqrt(%13) /* ty=Tensor[(13, 1), float64] span=from_string:32:22 */;
  %16 = multiply(%14, %15) /* ty=Tensor[(13, 26), float64] span=from_string:34:18 */;
  %17 = cast(%x1, dtype="float64") /* ty=Tensor[(26), float64] span=from_string:34:22 */;
  %18 = multiply(%16, %17) /* ty=Tensor[(13, 26), float64] span=from_string:36:13 */;
  %19 = cast(%x2, dtype="float64") /* ty=Tensor[(26), float64] span=from_string:36:17 */;
  %20 = add(%18, %19) /* ty=Tensor[(13, 26), float64] span=from_string:37:14 */;
  %21 = min(%20, axis=[1]) /* ty=Tensor[(13), float64] span=from_string:38:8 */;
  %22 = cast(%21, dtype="float16") /* ty=Tensor[(13), float16] span=from_string:25:3 */;
  (%22,) /* ty=(Tensor[(13), float16],) span=from_string:3:3 */
}



**************************************************
The repair subgraph:

#[version = "0.0.5"]
def @main(%p0: Tensor[(13, 26), float16] /* ty=Tensor[(13, 26), float16] span=from_string:3:13 */, %p1: Tensor[(13, 1), float16] /* ty=Tensor[(13, 1), float16] span=from_string:4:13 */, %p2: Tensor[(13, 1), float16] /* ty=Tensor[(13, 1), float16] span=from_string:5:13 */, %p3: float16 /* ty=float16 span=from_string:6:13 */, %p4: Tensor[(26), float16] /* ty=Tensor[(26), float16] span=from_string:11:13 */, %p5: Tensor[(26), float16] /* ty=Tensor[(26), float16] span=from_string:13:14 */) -> Tensor[(13), float16] {
  %0 = cast(%p0, dtype="float64") /* ty=Tensor[(13, 26), float64] span=from_string:8:17 */;
  %1 = cast(%p1, dtype="float64") /* ty=Tensor[(13, 1), float64] span=from_string:8:21 */;
  %2 = cast(%p2, dtype="float64") /* ty=Tensor[(13, 1), float64] span=from_string:7:12 */;
  %3 = cast(%p3, dtype="float64") /* ty=float64 span=from_string:7:16 */;
  %4 = add(%2, %3) /* ty=Tensor[(13, 1), float64] span=from_string:9:14 */;
  %5 = subtract(%0, %1) /* ty=Tensor[(13, 26), float64] span=from_string:10:18 */;
  %6 = rsqrt(%4) /* ty=Tensor[(13, 1), float64] span=from_string:10:22 */;
  %7 = multiply(%5, %6) /* ty=Tensor[(13, 26), float64] span=from_string:12:18 */;
  %8 = cast(%p4, dtype="float64") /* ty=Tensor[(26), float64] span=from_string:12:22 */;
  %9 = multiply(%7, %8) /* ty=Tensor[(13, 26), float64] span=from_string:14:13 */;
  %10 = cast(%p5, dtype="float64") /* ty=Tensor[(26), float64] span=from_string:14:17 */;
  %11 = add(%9, %10) /* ty=Tensor[(13, 26), float64] span=from_string:15:14 */;
  %12 = min(%11, axis=[1]) /* ty=Tensor[(13), float64] span=from_string:16:8 */;
  cast(%12, dtype="float16") /* ty=Tensor[(13), float16] span=from_string:3:3 */
}
