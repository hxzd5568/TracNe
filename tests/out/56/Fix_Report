Fixed


**************************************************
fixed method: Targeted repair


**************************************************
After repairing, error prone input's mean relatively error is: 0.0000000000


**************************************************
After repairing, mean relatively error is: 0.0000000000


**************************************************
The best recommendation:

#[version = "0.0.5"]
def @main(%x0: Tensor[(18, 14), float16] /* ty=Tensor[(18, 14), float16] span=from_string:10:13 */, %x1: Tensor[(13, 14), float16] /* ty=Tensor[(13, 14), float16] span=from_string:11:13 */, %x2: Tensor[(13), float16] /* ty=Tensor[(13), float16] span=from_string:42:18 */, %x3: Tensor[(13), float16] /* ty=Tensor[(13), float16] */, %x4: Tensor[(13), float16] /* ty=Tensor[(13), float16] */, %x5: Tensor[(13), float16] /* ty=Tensor[(13), float16] span=from_string:132:90 */, %x6: Tensor[(13), float16] /* ty=Tensor[(13), float16] span=from_string:132:23 */, %x7: Tensor[(14), float16] /* ty=Tensor[(14), float16] span=from_string:133:85 */, %x8: Tensor[(14), float16] /* ty=Tensor[(14), float16] span=from_string:133:90 */, hash="98149431c1e13665") -> (Tensor[(18, 13), float16], Tensor[(18, 14), float16], Tensor[(18, 13), float16]) {
  %0 = fast_tanh(%x0) /* ty=Tensor[(18, 14), float16] span=from_string:5:11 */;
  %1 = round(%0) /* ty=Tensor[(18, 14), float16] span=from_string:4:5 */;
  %2 = layout_transform(%x1, src_layout="NC", dst_layout="NC1n") /* ty=Tensor[(13, 14, 1), float16] span=from_string:8:5 */;
  %3 = nn.contrib_dense_pack(%1, %2, meta[relay.attrs.DensePackAttrs][0]) /* ty=Tensor[(18, 13), float16] span=from_string:14:9 */;
  %4 = tan(%3) /* ty=Tensor[(18, 13), float16] span=from_string:13:5 */;
  %5 = sigmoid(%4) /* ty=Tensor[(18, 13), float16] span=from_string:19:20 */;
  %6 = multiply(%5, %5) /* ty=Tensor[(18, 13), float16] span=from_string:18:5 */;
  %7 = floor(%6) /* ty=Tensor[(18, 13), float16] span=from_string:24:17 */;
  %8 = round(%7) /* ty=Tensor[(18, 13), float16] span=from_string:25:19 */;
  %9 = subtract(%8, %8) /* ty=Tensor[(18, 13), float16] span=from_string:23:5 */;
  %10 = round(%9) /* ty=Tensor[(18, 13), float16] span=from_string:29:5 */;
  %11 = add(%10, %6) /* ty=Tensor[(18, 13), float16] span=from_string:34:13 */;
  %12 = reshape(%11, newshape=[18, 13]) /* ty=Tensor[(18, 13), float16] span=from_string:33:5 */;
  %13 = add(%12, %x2) /* ty=Tensor[(18, 13), float16] span=from_string:39:19 */;
  %14 = nn.relu(%13) /* ty=Tensor[(18, 13), float16] span=from_string:40:9 */;
  %15 = sin(%14) /* ty=Tensor[(18, 13), float16] span=from_string:38:5 */;
  %16 = trunc(%15) /* ty=Tensor[(18, 13), float16] span=from_string:45:20 */;
  %17 = subtract(%16, %4) /* ty=Tensor[(18, 13), float16] span=from_string:46:9 */;
  %18 = tan(%17) /* ty=Tensor[(18, 13), float16] span=from_string:44:5 */;
  %19 = sum(%18, axis=[1], keepdims=True) /* ty=Tensor[(18, 1), float16] span=from_string:50:5 */;
  %20 = negative(%15) /* ty=Tensor[(18, 13), float16] span=from_string:53:5 */;
  %21 = nn.fast_softmax(%20, axis=1) /* ty=Tensor[(18, 13), float16] span=from_string:79:16 */;
  %22 = round(%21) /* ty=Tensor[(18, 13), float16] span=from_string:81:14 */;
  %23 = floor(%19) /* ty=Tensor[(18, 1), float16] span=from_string:91:20 */;
  %24 = cos(%22) /* ty=Tensor[(18, 13), float16] span=from_string:91:24 */;
  %25 = multiply(%20, %9) /* ty=Tensor[(18, 13), float16] span=from_string:70:23 */;
  %26 = nn.relu(%10) /* ty=Tensor[(18, 13), float16] span=from_string:57:11 */;
  %27 = trunc(%26) /* ty=Tensor[(18, 13), float16] span=from_string:56:5 */;
  %28 = negative(%27) /* ty=Tensor[(18, 13), float16] span=from_string:62:21 */;
  %29 = fast_tanh(%28) /* ty=Tensor[(18, 13), float16] span=from_string:63:15 */;
  %30 = fast_tanh(%29) /* ty=Tensor[(18, 13), float16] span=from_string:61:5 */;
  %31 = abs(%30) /* ty=Tensor[(18, 13), float16] span=from_string:71:16 */;
  %32 = expand_dims(%25, axis=1) /* ty=Tensor[(18, 1, 13), float16] span=from_string:72:20 */;
  %33 = ceil(%31) /* ty=Tensor[(18, 13), float16] span=from_string:72:25 */;
  %34 = subtract(%32, %33) /* ty=Tensor[(18, 18, 13), float16] span=from_string:73:10 */;
  %35 = add(%x6, 1.00136e-05f16 /* ty=float16 span=from_string:132:42 */) /* ty=Tensor[(13), float16] span=from_string:83:16 */;
  %36 = max(%34, axis=[1]) /* ty=Tensor[(18, 13), float16] span=from_string:68:5 */;
  %37 = rsqrt(%35) /* ty=Tensor[(13), float16] span=from_string:86:24 */;
  %38 = negative(%x5) /* ty=Tensor[(13), float16] span=from_string:86:20 */;
  %39 = multiply(%36, %37) /* ty=Tensor[(18, 13), float16] span=from_string:87:14 */;
  %40 = multiply(%38, %37) /* ty=Tensor[(13), float16] span=from_string:87:18 */;
  %41 = add(%39, %40) /* ty=Tensor[(18, 13), float16] span=from_string:88:17 */;
  %42 = round(%41) /* ty=Tensor[(18, 13), float16] span=from_string:90:21 */;
  %43 = round(%27) /* ty=Tensor[(18, 13), float16] span=from_string:90:26 */;
  %44 = multiply(%42, %43) /* ty=Tensor[(18, 13), float16] span=from_string:92:20 */;
  %45 = subtract(%23, %24) /* ty=Tensor[(18, 13), float16] span=from_string:93:14 */;
  %46 = negative(%44) /* ty=Tensor[(18, 13), float16] span=from_string:93:19 */;
  %47 = reshape(%1, newshape=[18, 2, 7]) /* ty=Tensor[(18, 2, 7), float16] span=from_string:96:5 */;
  %48 = mean(%47, axis=[2], keepdims=True) /* ty=Tensor[(18, 2, 1), float16] span=from_string:100:7 */;
  %49 = cast(%47, dtype="float64") /* ty=Tensor[(18, 2, 7), float64] span=from_string:113:18 */;
  %50 = cast(%48, dtype="float64") /* ty=Tensor[(18, 2, 1), float64] span=from_string:113:23 */;
  %51 = variance(%47, %48, axis=[2], keepdims=True) /* ty=Tensor[(18, 2, 1), float16] span=from_string:104:5 */;
  %52 = cast(%51, dtype="float64") /* ty=Tensor[(18, 2, 1), float64] span=from_string:112:13 */;
  %53 = cast(1.00136e-05f16 /* ty=float16 span=from_string:133:42 */, dtype="float64") /* ty=float64 span=from_string:112:18 */;
  %54 = add(%52, %53) /* ty=Tensor[(18, 2, 1), float64] span=from_string:114:15 */;
  %55 = subtract(%49, %50) /* ty=Tensor[(18, 2, 7), float64] span=from_string:115:19 */;
  %56 = rsqrt(%54) /* ty=Tensor[(18, 2, 1), float64] span=from_string:115:24 */;
  %57 = multiply(%55, %56) /* ty=Tensor[(18, 2, 7), float64] span=from_string:116:17 */;
  %58 = reshape(%57, newshape=[18, 14]) /* ty=Tensor[(18, 14), float64] span=from_string:118:19 */;
  %59 = cast(%x7, dtype="float64") /* ty=Tensor[(14), float64] span=from_string:118:24 */;
  %60 = multiply(%58, %59) /* ty=Tensor[(18, 14), float64] span=from_string:120:13 */;
  %61 = cast(%x8, dtype="float64") /* ty=Tensor[(14), float64] span=from_string:120:18 */;
  %62 = add(%60, %61) /* ty=Tensor[(18, 14), float64] span=from_string:121:8 */;
  %63 = nn.fast_softmax(%30, axis=1) /* ty=Tensor[(18, 13), float16] span=from_string:125:17 */;
  %64 = round(%63) /* ty=Tensor[(18, 13), float16] span=from_string:126:17 */;
  %65 = trunc(%64) /* ty=Tensor[(18, 13), float16] span=from_string:127:25 */;
  %66 = nn.leaky_relu(%65, alpha=0.507132f) /* ty=Tensor[(18, 13), float16] span=from_string:129:21 */;
  %67 = nn.leaky_relu(%18, alpha=0.50118f) /* ty=Tensor[(18, 13), float16] span=from_string:129:26 */;
  %68 = multiply(%66, %67) /* ty=Tensor[(18, 13), float16] span=from_string:130:14 */;
  %69 = maximum(%45, %46) /* ty=Tensor[(18, 13), float16] span=from_string:78:5 */;
  %70 = cast(%62, dtype="float16") /* ty=Tensor[(18, 14), float16] span=from_string:108:3 */;
  %71 = subtract(%68, %12) /* ty=Tensor[(18, 13), float16] span=from_string:124:5 */;
  (%69, %70, %71) /* ty=(Tensor[(18, 13), float16], Tensor[(18, 14), float16], Tensor[(18, 13), float16]) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.attrs.DensePackAttrs"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float16", 
        "units": "0", 
        "weight_layout": "4"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC1n"
    }
  ], 
  "b64ndarrays": [], 
  "attrs": {"tvm_version": "0.12.dev0"}
}


**************************************************
The repair subgraph:

#[version = "0.0.5"]
def @main(%p015: Tensor[(18, 2, 7), float16] /* ty=Tensor[(18, 2, 7), float16] span=from_string:3:13 */, %p16: Tensor[(18, 2, 1), float16] /* ty=Tensor[(18, 2, 1), float16] span=from_string:4:13 */, %p22: Tensor[(18, 2, 1), float16] /* ty=Tensor[(18, 2, 1), float16] span=from_string:5:13 */, %p31: float16 /* ty=float16 span=from_string:6:13 */, %p41: Tensor[(14), float16] /* ty=Tensor[(14), float16] span=from_string:12:13 */, %p51: Tensor[(14), float16] /* ty=Tensor[(14), float16] span=from_string:14:14 */) -> Tensor[(18, 14), float16] {
  %0 = cast(%p015, dtype="float64") /* ty=Tensor[(18, 2, 7), float64] span=from_string:8:17 */;
  %1 = cast(%p16, dtype="float64") /* ty=Tensor[(18, 2, 1), float64] span=from_string:8:21 */;
  %2 = cast(%p22, dtype="float64") /* ty=Tensor[(18, 2, 1), float64] span=from_string:7:12 */;
  %3 = cast(%p31, dtype="float64") /* ty=float64 span=from_string:7:16 */;
  %4 = add(%2, %3) /* ty=Tensor[(18, 2, 1), float64] span=from_string:9:14 */;
  %5 = subtract(%0, %1) /* ty=Tensor[(18, 2, 7), float64] span=from_string:10:18 */;
  %6 = rsqrt(%4) /* ty=Tensor[(18, 2, 1), float64] span=from_string:10:22 */;
  %7 = multiply(%5, %6) /* ty=Tensor[(18, 2, 7), float64] span=from_string:11:16 */;
  %8 = reshape(%7, newshape=[18, 14]) /* ty=Tensor[(18, 14), float64] span=from_string:13:19 */;
  %9 = cast(%p41, dtype="float64") /* ty=Tensor[(14), float64] span=from_string:13:23 */;
  %10 = multiply(%8, %9) /* ty=Tensor[(18, 14), float64] span=from_string:15:13 */;
  %11 = cast(%p51, dtype="float64") /* ty=Tensor[(14), float64] span=from_string:15:18 */;
  %12 = add(%10, %11) /* ty=Tensor[(18, 14), float64] span=from_string:16:8 */;
  cast(%12, dtype="float16") /* ty=Tensor[(18, 14), float16] span=from_string:3:3 */
}
