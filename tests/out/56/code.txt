#[version = "0.0.5"]
def @main(%x0: Tensor[(18, 14), float16] /* ty=Tensor[(18, 14), float16] span=from_string:3:15 */, %x1: Tensor[(13, 14), float16] /* ty=Tensor[(13, 14), float16] span=from_string:5:23 */, %x2: Tensor[(13), float16] /* ty=Tensor[(13), float16] span=from_string:15:28 */, %x3: Tensor[(13), float16] /* ty=Tensor[(13), float16] span=from_string:39:30 */, %x4: Tensor[(13), float16] /* ty=Tensor[(13), float16] span=from_string:39:35 */, %x5: Tensor[(13), float16] /* ty=Tensor[(13), float16] span=from_string:39:40 */, %x6: Tensor[(13), float16] /* ty=Tensor[(13), float16] span=from_string:39:45 */, %x7: Tensor[(14), float16] /* ty=Tensor[(14), float16] span=from_string:48:29 */, %x8: Tensor[(14), float16] /* ty=Tensor[(14), float16] span=from_string:48:34 */) -> (Tensor[(18, 13), float16], Tensor[(18, 14), float16], Tensor[(18, 13), float16]) {
  %0 = tanh(%x0) /* ty=Tensor[(18, 14), float16] span=from_string:4:16 */;
  %1 = round(%0) /* ty=Tensor[(18, 14), float16] span=from_string:48:25 */;
  %2 = nn.dense(%1, %x1, units=13) /* ty=Tensor[(18, 13), float16] span=from_string:6:14 */;
  %3 = tan(%2) /* ty=Tensor[(18, 13), float16] span=from_string:19:25 */;
  %4 = sigmoid(%3) /* ty=Tensor[(18, 13), float16] span=from_string:8:24 */;
  %5 = multiply(%4, %4) /* ty=Tensor[(18, 13), float16] span=from_string:13:19 */;
  %6 = floor(%5) /* ty=Tensor[(18, 13), float16] span=from_string:10:16 */;
  %7 = round(%6) /* ty=Tensor[(18, 13), float16] span=from_string:11:23 */;
  %8 = subtract(%7, %7) /* ty=Tensor[(18, 13), float16] span=from_string:28:26 */;
  %9 = round(%8) /* ty=Tensor[(18, 13), float16] span=from_string:30:19 */;
  %10 = add(%9, %5) /* ty=Tensor[(18, 13), float16] span=from_string:14:19 */;
  %11 = reshape(%10, newshape=[18, 13]) /* ty=Tensor[(18, 13), float16] span=from_string:55:25 */;
  %12 = nn.bias_add(%11, %x2) /* ty=Tensor[(18, 13), float16] span=from_string:16:19 */;
  %13 = nn.relu(%12) /* ty=Tensor[(18, 13), float16] span=from_string:17:15 */;
  %14 = sin(%13) /* ty=Tensor[(18, 13), float16] span=from_string:23:20 */;
  %15 = trunc(%14) /* ty=Tensor[(18, 13), float16] span=from_string:19:20 */;
  %16 = subtract(%15, %3) /* ty=Tensor[(18, 13), float16] span=from_string:20:15 */;
  %17 = tan(%16) /* ty=Tensor[(18, 13), float16] span=from_string:53:25 */;
  %18 = sum(%17, axis=[1], keepdims=True) /* ty=Tensor[(18, 1), float16] span=from_string:22:17 */;
  %19 = negative(%14) /* ty=Tensor[(18, 13), float16] span=from_string:28:21 */;
  %20 = nn.softmax(%19, axis=1) /* ty=Tensor[(18, 13), float16] span=from_string:25:17 */;
  %21 = round(%20) /* ty=Tensor[(18, 13), float16] span=from_string:26:15 */;
  %22 = floor(%18) /* ty=Tensor[(18, 1), float16] span=from_string:27:20 */;
  %23 = cos(%21) /* ty=Tensor[(18, 13), float16] span=from_string:27:25 */;
  %24 = multiply(%19, %8) /* ty=Tensor[(18, 13), float16] span=from_string:29:23 */;
  %25 = nn.relu(%9) /* ty=Tensor[(18, 13), float16] span=from_string:31:17 */;
  %26 = trunc(%25) /* ty=Tensor[(18, 13), float16] span=from_string:44:17 */;
  %27 = negative(%26) /* ty=Tensor[(18, 13), float16] span=from_string:33:16 */;
  %28 = tanh(%27) /* ty=Tensor[(18, 13), float16] span=from_string:34:16 */;
  %29 = tanh(%28) /* ty=Tensor[(18, 13), float16] span=from_string:49:22 */;
  %30 = abs(%29) /* ty=Tensor[(18, 13), float16] span=from_string:36:16 */;
  %31 = expand_dims(%24, axis=1) /* ty=Tensor[(18, 1, 13), float16] span=from_string:37:20 */;
  %32 = ceil(%30) /* ty=Tensor[(18, 13), float16] span=from_string:37:25 */;
  %33 = subtract(%31, %32) /* ty=Tensor[(18, 18, 13), float16] span=from_string:38:16 */;
  %34 = max(%33, axis=[1]) /* ty=Tensor[(18, 13), float16] span=from_string:39:25 */;
  %35 = nn.batch_norm(%34, %x3, %x4, %x5, %x6, center=False, scale=False) /* ty=(Tensor[(18, 13), float16], Tensor[(13), float16], Tensor[(13), float16]) span=from_string:42:11 */;
  %36 = %35.0 /* ty=Tensor[(18, 13), float16] span=from_string:43:17 */;
  %37 = round(%36) /* ty=Tensor[(18, 13), float16] span=from_string:45:21 */;
  %38 = round(%26) /* ty=Tensor[(18, 13), float16] span=from_string:45:26 */;
  %39 = multiply(%37, %38) /* ty=Tensor[(18, 13), float16] span=from_string:46:20 */;
  %40 = subtract(%22, %23) /* ty=Tensor[(18, 13), float16] span=from_string:47:20 */;
  %41 = negative(%39) /* ty=Tensor[(18, 13), float16] span=from_string:47:25 */;
  %42 = nn.softmax(%29, axis=1) /* ty=Tensor[(18, 13), float16] span=from_string:50:17 */;
  %43 = round(%42) /* ty=Tensor[(18, 13), float16] span=from_string:51:17 */;
  %44 = trunc(%43) /* ty=Tensor[(18, 13), float16] span=from_string:52:25 */;
  %45 = nn.leaky_relu(%44, alpha=0.507132f) /* ty=Tensor[(18, 13), float16] span=from_string:54:21 */;
  %46 = nn.leaky_relu(%17, alpha=0.50118f) /* ty=Tensor[(18, 13), float16] span=from_string:54:26 */;
  %47 = multiply(%45, %46) /* ty=Tensor[(18, 13), float16] span=from_string:55:20 */;
  %48 = maximum(%40, %41) /* ty=Tensor[(18, 13), float16] span=from_string:56:6 */;
  %49 = nn.group_norm(%1, %x7, %x8, num_groups=2) /* ty=Tensor[(18, 14), float16] span=from_string:56:11 */;
  %50 = subtract(%47, %11) /* ty=Tensor[(18, 13), float16] span=from_string:56:16 */;
  (%48, %49, %50) /* ty=(Tensor[(18, 13), float16], Tensor[(18, 14), float16], Tensor[(18, 13), float16]) span=from_string:3:5 */
}
