Fixed


**************************************************
fixed method: Targeted repair


**************************************************
After repairing, error prone input's mean relatively error is: 0.0000000000


**************************************************
After repairing, mean relatively error is: 0.0000000000


**************************************************
The best recommendation:

#[version = "0.0.5"]
def @main(%pzx: Tensor[(64), float32] /* ty=Tensor[(64), float32] span=from_string:21:13 */, hash="ed00b6623814ae6a") -> (Tensor[(64), float32],) {
  %0 = cast(%pzx, dtype="float64") /* ty=Tensor[(64), float64] span=from_string:6:18 */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(64), float32] span=from_string:21:24 */, dtype="float64") /* ty=Tensor[(64), float64] span=from_string:6:22 */;
  %2 = multiply(%0, %1) /* ty=Tensor[(64), float64] span=from_string:8:12 */;
  %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(64), float32] span=from_string:21:103 */, dtype="float64") /* ty=Tensor[(64), float64] span=from_string:8:16 */;
  %4 = add(%2, %3) /* ty=Tensor[(64), float64] span=from_string:9:13 */;
  %5 = ceil(%4) /* ty=Tensor[(64), float64] span=from_string:10:12 */;
  %6 = abs(%5) /* ty=Tensor[(64), float64] span=from_string:11:16 */;
  %7 = sigmoid(%6) /* ty=Tensor[(64), float64] span=from_string:12:18 */;
  %8 = transpose(%7, axes=[0]) /* ty=Tensor[(64), float64] span=from_string:13:13 */;
  %9 = ceil(%8) /* ty=Tensor[(64), float64] span=from_string:14:17 */;
  %10 = nn.relu(%9) /* ty=Tensor[(64), float64] span=from_string:15:13 */;
  %11 = abs(%10) /* ty=Tensor[(64), float64] span=from_string:16:13 */;
  %12 = tan(%11) /* ty=Tensor[(64), float64] span=from_string:17:19 */;
  %13 = fast_tanh(%12) /* ty=Tensor[(64), float64] span=from_string:18:19 */;
  %14 = fast_tanh(%13) /* ty=Tensor[(64), float64] span=from_string:19:8 */;
  %15 = cast(%14, dtype="float32") /* ty=Tensor[(64), float32] span=from_string:4:3 */;
  (%15,) /* ty=(Tensor[(64), float32],) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.Constant"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [3, 11]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "8", 
        "data": "0", 
        "span": "6", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "5", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "24", 
        "end_column": "42", 
        "end_line": "21", 
        "line": "21", 
        "source_name": "7"
      }
    }, 
    {
      "type_key": "SourceName", 
      "repr_str": "from_string"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "9", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [10]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "15", 
        "data": "1", 
        "span": "14", 
        "virtual_device_": "12"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "13", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "103", 
        "end_column": "121", 
        "end_line": "21", 
        "line": "21", 
        "source_name": "7"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "16", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [17]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQBAAAAAAAAAAAABAAAAAAAArukZP7DrMz8hZxc/tisrPxfYoz31zxQ/K8tWPw1nDz+9RNw+5qFBP2YCSz4EfM4+4r+SPm5dyT7hKZc+2vUjPwJJgTtcom0/zKtbP/ZXCD/l4Dk/yZ6hPVn2nD74kUQ+xd6vPkVb+j7HvAo+e2CcPrXtej/h9e8+rIswPxolFj8DVEs/9rUeP9fpQz42IlI+114wPtx68z5N0cw+6Ts9P8OyGD/W2CU/vwqKPijNBz8Ns04+rhGpPi+8Kj30lZA+F9k6P1oXSj+AzYo+zRCNPReYgjwjoVc/+m6IPoMYRj+IjRc+c5jlPVhpkz4S5KI82EROPvDn/z62GDY/BRzCPQ==", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQBAAAAAAAAAAAABAAAAAAAAzgSBP5wylD7OOA8/y2GSP5cxWz9wtlE/WAaJPz2zQT+o7k4/Ec2GP8oJTz8m/Ko/MwrDPrjl1T4vwZg+Cnm1PZ2pYz7BFXQ/XeiVP3VhQj/u6T0/h8SvPugUvj7Jgsc+BDGaP+bpYT/6Z8M+IJCwPt2m9j5pGsw+O3VsPwTulD+Qc58+4keTPhPyWz/EHJw+7g9OP3+3lD/pG2A/e2KfPrgRMz/03Vg/om2QP2iq6z73w30/MAs9P8T3PD/UNnc/CPUxP19HTz4S18o+UGqzPv2rRT8697E/IssHP390Tz+Ukq8+6vMdP5ZGGj/cv2E/mQlIP7TD5T6vnh4+cPRdPw=="
  ], 
  "attrs": {"tvm_version": "0.12.dev0"}
}


**************************************************
The repair subgraph:

#[version = "0.0.5"]
def @main(%p0: Tensor[(64), float32] /* ty=Tensor[(64), float32] span=from_string:3:13 */, %p1: Tensor[(64), float32] /* ty=Tensor[(64), float32] span=from_string:4:13 */, %p2: Tensor[(64), float32] /* ty=Tensor[(64), float32] span=from_string:6:13 */) -> Tensor[(64), float32] {
  %0 = cast(%p0, dtype="float64") /* ty=Tensor[(64), float64] span=from_string:5:18 */;
  %1 = cast(%p1, dtype="float64") /* ty=Tensor[(64), float64] span=from_string:5:22 */;
  %2 = multiply(%0, %1) /* ty=Tensor[(64), float64] span=from_string:7:12 */;
  %3 = cast(%p2, dtype="float64") /* ty=Tensor[(64), float64] span=from_string:7:16 */;
  %4 = add(%2, %3) /* ty=Tensor[(64), float64] span=from_string:8:13 */;
  %5 = ceil(%4) /* ty=Tensor[(64), float64] span=from_string:9:12 */;
  %6 = abs(%5) /* ty=Tensor[(64), float64] span=from_string:10:16 */;
  %7 = sigmoid(%6) /* ty=Tensor[(64), float64] span=from_string:11:18 */;
  %8 = transpose(%7, axes=[0]) /* ty=Tensor[(64), float64] span=from_string:12:13 */;
  %9 = ceil(%8) /* ty=Tensor[(64), float64] span=from_string:13:17 */;
  %10 = nn.relu(%9) /* ty=Tensor[(64), float64] span=from_string:14:13 */;
  %11 = abs(%10) /* ty=Tensor[(64), float64] span=from_string:15:13 */;
  %12 = tan(%11) /* ty=Tensor[(64), float64] span=from_string:16:19 */;
  %13 = fast_tanh(%12) /* ty=Tensor[(64), float64] span=from_string:17:19 */;
  %14 = fast_tanh(%13) /* ty=Tensor[(64), float64] span=from_string:18:8 */;
  cast(%14, dtype="float32") /* ty=Tensor[(64), float32] span=from_string:3:3 */
}
