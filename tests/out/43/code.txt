#[version = "0.0.5"]
def @main(%x0: Tensor[(3), float16] /* ty=Tensor[(3), float16] span=from_string:3:18 */, %x1: Tensor[(1), float16] /* ty=Tensor[(1), float16] span=from_string:10:26 */, %x2: Tensor[(1), float16] /* ty=Tensor[(1), float16] span=from_string:11:28 */, %x3: Tensor[(1), float16] /* ty=Tensor[(1), float16] span=from_string:11:33 */, %x4: Tensor[(1), float16] /* ty=Tensor[(1), float16] span=from_string:14:25 */, %x5: Tensor[(8), float16] /* ty=Tensor[(8), float16] span=from_string:33:30 */, %x6: Tensor[(8), float16] /* ty=Tensor[(8), float16] span=from_string:33:35 */) -> (Tensor[(3, 8, 1), float16],) {
  %0 = reshape(%x0, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float16] span=from_string:4:17 */;
  %1 = mean(%0, axis=[1], keepdims=True) /* ty=Tensor[(3, 1, 1), float16] span=from_string:7:23 */;
  %2 = sum(%1, axis=[1], keepdims=True) /* ty=Tensor[(3, 1, 1), float16] span=from_string:18:38 */;
  %3 = nn.relu(%2) /* ty=Tensor[(3, 1, 1), float16] span=from_string:9:18 */;
  %4 = subtract(%3, %1) /* ty=Tensor[(3, 1, 1), float16] span=from_string:8:15 */;
  %5 = tanh(%4) /* ty=Tensor[(3, 1, 1), float16] span=from_string:9:14 */;
  %6 = add(%5, %3) /* ty=Tensor[(3, 1, 1), float16] span=from_string:10:22 */;
  %7 = nn.bias_add(%6, %x1) /* ty=Tensor[(3, 1, 1), float16] span=from_string:22:25 */;
  %8 = nn.layer_norm(%7, %x2, %x3, axis=1) /* ty=Tensor[(3, 1, 1), float16] span=from_string:17:20 */;
  %9 = sin(%8) /* ty=Tensor[(3, 1, 1), float16] span=from_string:18:29 */;
  %10 = nn.batch_flatten(%9) /* ty=Tensor[(3, 1), float16] span=from_string:14:20 */;
  %11 = nn.prelu(%10, %x4) /* ty=Tensor[(3, 1), float16] span=from_string:15:19 */;
  %12 = reshape(%11, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float16] span=from_string:16:19 */;
  %13 = nn.relu(%12) /* ty=Tensor[(3, 1, 1), float16] span=from_string:29:17 */;
  %14 = add(%13, %8) /* ty=Tensor[(3, 1, 1), float16] span=from_string:18:33 */;
  %15 = (%14, %9, %14, %2) /* ty=(Tensor[(3, 1, 1), float16], Tensor[(3, 1, 1), float16], Tensor[(3, 1, 1), float16], Tensor[(3, 1, 1), float16]) span=from_string:18:23 */;
  %16 = concatenate(%15, axis=1) /* ty=Tensor[(3, 4, 1), float16] span=from_string:25:26 */;
  %17 = nn.leaky_relu(%16, alpha=0.120338f) /* ty=Tensor[(3, 4, 1), float16] span=from_string:20:26 */;
  %18 = nn.max_pool1d(%17, pool_size=[3], padding=[1, 1], ceil_mode=True) /* ty=Tensor[(3, 4, 1), float16] span=from_string:21:15 */;
  %19 = abs(%18) /* ty=Tensor[(3, 4, 1), float16] span=from_string:22:20 */;
  %20 = minimum(%19, %7) /* ty=Tensor[(3, 4, 1), float16] span=from_string:28:29 */;
  %21 = nn.softmax(%20, axis=1) /* ty=Tensor[(3, 4, 1), float16] span=from_string:24:19 */;
  %22 = sigmoid(%21) /* ty=Tensor[(3, 4, 1), float16] span=from_string:25:21 */;
  %23 = multiply(%22, %16) /* ty=Tensor[(3, 4, 1), float16] span=from_string:26:19 */;
  %24 = nn.relu(%23) /* ty=Tensor[(3, 4, 1), float16] span=from_string:27:19 */;
  %25 = nn.relu(%24) /* ty=Tensor[(3, 4, 1), float16] span=from_string:28:24 */;
  %26 = (%25, %20) /* ty=(Tensor[(3, 4, 1), float16], Tensor[(3, 4, 1), float16]) span=from_string:28:23 */;
  %27 = split(%13, indices_or_sections=[], axis=1) /* ty=(Tensor[(3, 1, 1), float16],) span=from_string:30:11 */;
  %28 = concatenate(%26, axis=1) /* ty=Tensor[(3, 8, 1), float16] span=from_string:31:20 */;
  %29 = %27.0 /* ty=Tensor[(3, 1, 1), float16] span=from_string:31:25 */;
  %30 = maximum(%28, %29) /* ty=Tensor[(3, 8, 1), float16] span=from_string:32:25 */;
  %31 = strided_slice(%30, begin=[0], end=[1], strides=[2], axes=[2]) /* ty=Tensor[(3, 8, 1), float16] span=from_string:33:25 */;
  %32 = nn.layer_norm(%31, %x5, %x6, axis=1, center=False, scale=False) /* ty=Tensor[(3, 8, 1), float16] span=from_string:34:6 */;
  (%32,) /* ty=(Tensor[(3, 8, 1), float16],) span=from_string:3:5 */
}
