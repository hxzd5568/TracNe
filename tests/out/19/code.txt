#[version = "0.0.5"]
def @main(%pzx: Tensor[(64, 4), float32] /* ty=Tensor[(64, 4), float32] */, %pzweight: Tensor[(3, 4), float32] /* ty=Tensor[(3, 4), float32] */, %pzin_bias: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %px1: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %px2: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %px3: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %px4: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %px5: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %px6: Tensor[(3), float32] /* ty=Tensor[(3), float32] */) -> (Tensor[(64, 9), float32],) {
  %0 = nn.dense(%pzx, %pzweight, units=None) /* ty=Tensor[(64, 3), float32] span=from_string:4:12 */;
  %1 = add(%0, %pzin_bias) /* ty=Tensor[(64, 3), float32] span=from_string:5:16 */;
  %2 = nn.relu(%1) /* ty=Tensor[(64, 3), float32] span=from_string:6:13 */;
  %3 = multiply(%2, meta[relay.Constant][0] /* ty=Tensor[(3), float32] span=from_string:6:22 */) /* ty=Tensor[(64, 3), float32] span=from_string:3:3 */;
  %4 = nn.batch_norm(%3, %px1, %px2, %px3, %px4, center=False) /* ty=(Tensor[(64, 3), float32], Tensor[(3), float32], Tensor[(3), float32]) span=from_string:6:10 */;
  %5 = %4.0 /* ty=Tensor[(64, 3), float32] span=from_string:17:34 */;
  %6 = nn.group_norm(%5, %px5, %px6, num_groups=3, center=False) /* ty=Tensor[(64, 3), float32] span=from_string:8:18 */;
  %7 = sigmoid(%6) /* ty=Tensor[(64, 3), float32] span=from_string:15:15 */;
  %8 = reshape(%7, newshape=[64, 3]) /* ty=Tensor[(64, 3), float32] span=from_string:10:14 */;
  %9 = tan(%8) /* ty=Tensor[(64, 3), float32] span=from_string:11:14 */;
  %10 = tan(%9) /* ty=Tensor[(64, 3), float32] span=from_string:12:16 */;
  %11 = split(%10, indices_or_sections=[1], axis=1) /* ty=(Tensor[(64, 1), float32], Tensor[(64, 2), float32]) span=from_string:14:11 */;
  %12 = tan(%7) /* ty=Tensor[(64, 3), float32] span=from_string:16:17 */;
  %13 = %11.1 /* ty=Tensor[(64, 2), float32] span=from_string:17:24 */;
  %14 = floor(%12) /* ty=Tensor[(64, 3), float32] span=from_string:17:29 */;
  %15 = %11.0 /* ty=Tensor[(64, 1), float32] span=from_string:17:38 */;
  %16 = (%13, %14, %5, %15) /* ty=(Tensor[(64, 2), float32], Tensor[(64, 3), float32], Tensor[(64, 3), float32], Tensor[(64, 1), float32]) span=from_string:17:23 */;
  %17 = concatenate(%16, axis=1) /* ty=Tensor[(64, 9), float32] span=from_string:18:6 */;
  (%17,) /* ty=(Tensor[(64, 9), float32],) span=from_string:3:5 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.Constant"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "8", 
        "data": "0", 
        "span": "6", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "5", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "22", 
        "end_column": "40", 
        "end_line": "6", 
        "line": "6", 
        "source_name": "7"
      }
    }, 
    {
      "type_key": "SourceName", 
      "repr_str": "from_string"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "9", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [10]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "3"
      }
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQADAAAAAAAAAAwAAAAAAAAAzsA7Pzu0LT8BD0k/"
  ], 
  "attrs": {"tvm_version": "0.12.dev0"}
}