#[version = "0.0.5"]
def @main(%x0: Tensor[(4), float32] /* ty=Tensor[(4), float32] span=from_string:3:15 */, %x1: Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:23:30 */, %x2: Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:23:35 */, %x3: Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:29:28 */, %x4: Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:33:30 */, %x5: Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:33:35 */, %x6: Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:33:40 */, %x7: Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:33:45 */, %x8: Tensor[(4), float32] /* ty=Tensor[(4), float32] span=from_string:43:30 */, %x9: Tensor[(4), float32] /* ty=Tensor[(4), float32] span=from_string:43:35 */) -> (Tensor[(4, 2), float32], Tensor[(4, 16), float32], Tensor[(4, 2), float32], Tensor[(4), float32]) {
  %0 = tanh(%x0) /* ty=Tensor[(4), float32] span=from_string:4:14 */;
  %1 = sin(%0) /* ty=Tensor[(4), float32] span=from_string:5:16 */;
  %2 = round(%1) /* ty=Tensor[(4), float32] span=from_string:6:14 */;
  %3 = cos(%2) /* ty=Tensor[(4), float32] span=from_string:58:16 */;
  %4 = tanh(%3) /* ty=Tensor[(4), float32] span=from_string:8:19 */;
  %5 = negative(%4) /* ty=Tensor[(4), float32] span=from_string:9:16 */;
  %6 = trunc(%5) /* ty=Tensor[(4), float32] span=from_string:10:18 */;
  %7 = reshape(%6, newshape=[4, 1]) /* ty=Tensor[(4, 1), float32] span=from_string:11:27 */;
  %8 = (%7, %7) /* ty=(Tensor[(4, 1), float32], Tensor[(4, 1), float32]) span=from_string:11:22 */;
  %9 = concatenate(%8, axis=1) /* ty=Tensor[(4, 2), float32] span=from_string:20:15 */;
  %10 = tan(%9) /* ty=Tensor[(4, 2), float32] span=from_string:13:15 */;
  %11 = cos(%10) /* ty=Tensor[(4, 2), float32] span=from_string:14:17 */;
  %12 = round(%11) /* ty=Tensor[(4, 2), float32] span=from_string:15:21 */;
  %13 = transpose(%12, axes=[0, 1]) /* ty=Tensor[(4, 2), float32] span=from_string:24:26 */;
  %14 = (%13,) /* ty=(Tensor[(4, 2), float32],) span=from_string:16:23 */;
  %15 = concatenate(%14, axis=1) /* ty=Tensor[(4, 2), float32] span=from_string:17:17 */;
  %16 = round(%15) /* ty=Tensor[(4, 2), float32] span=from_string:18:28 */;
  %17 = nn.batch_flatten(%16) /* ty=Tensor[(4, 2), float32] span=from_string:21:20 */;
  %18 = sin(%9) /* ty=Tensor[(4, 2), float32] span=from_string:42:24 */;
  %19 = add(%18, %17) /* ty=Tensor[(4, 2), float32] span=from_string:22:15 */;
  %20 = abs(%19) /* ty=Tensor[(4, 2), float32] span=from_string:23:25 */;
  %21 = nn.group_norm(%20, %x1, %x2, num_groups=1, scale=False) /* ty=Tensor[(4, 2), float32] span=from_string:24:21 */;
  %22 = multiply(%21, %13) /* ty=Tensor[(4, 2), float32] span=from_string:32:20 */;
  %23 = nn.softmax(%22, axis=1) /* ty=Tensor[(4, 2), float32] span=from_string:26:17 */;
  %24 = split(%23, indices_or_sections=[1], axis=1) /* ty=(Tensor[(4, 1), float32], Tensor[(4, 1), float32]) span=from_string:28:11 */;
  %25 = %24.0 /* ty=Tensor[(4, 1), float32] span=from_string:42:34 */;
  %26 = nn.bias_add(%25, %x3) /* ty=Tensor[(4, 1), float32] span=from_string:30:17 */;
  %27 = trunc(%26) /* ty=Tensor[(4, 1), float32] span=from_string:31:19 */;
  %28 = nn.relu(%27) /* ty=Tensor[(4, 1), float32] span=from_string:32:15 */;
  %29 = add(%28, %22) /* ty=Tensor[(4, 2), float32] span=from_string:33:25 */;
  %30 = nn.batch_norm(%29, %x4, %x5, %x6, %x7) /* ty=(Tensor[(4, 2), float32], Tensor[(2), float32], Tensor[(2), float32]) span=from_string:36:11 */;
  %31 = %30.0 /* ty=Tensor[(4, 2), float32] span=from_string:52:21 */;
  %32 = ceil(%31) /* ty=Tensor[(4, 2), float32] span=from_string:38:19 */;
  %33 = reshape(%32, newshape=[4, 1, 2]) /* ty=Tensor[(4, 1, 2), float32] span=from_string:39:25 */;
  %34 = nn.avg_pool1d(%33, pool_size=[2], dilation=[2], padding=[1, 0]) /* ty=Tensor[(4, 1, 1), float32] span=from_string:40:34 */;
  %35 = %24.1 /* ty=Tensor[(4, 1), float32] span=from_string:41:17 */;
  %36 = trunc(%35) /* ty=Tensor[(4, 1), float32] span=from_string:50:17 */;
  %37 = (%18, %36, %25) /* ty=(Tensor[(4, 2), float32], Tensor[(4, 1), float32], Tensor[(4, 1), float32]) span=from_string:42:23 */;
  %38 = concatenate(%37, axis=1) /* ty=Tensor[(4, 4), float32] span=from_string:43:25 */;
  %39 = nn.adaptive_max_pool1d(%34, output_size=[1]) /* ty=Tensor[(4, 1, 1), float32] span=from_string:44:20 */;
  %40 = nn.layer_norm(%38, %x8, %x9, axis=1, scale=False) /* ty=Tensor[(4, 4), float32] span=from_string:44:25 */;
  %41 = maximum(%39, %40) /* ty=Tensor[(4, 4, 4), float32] span=from_string:45:19 */;
  %42 = nn.relu(%41) /* ty=Tensor[(4, 4, 4), float32] span=from_string:46:17 */;
  %43 = floor(%42) /* ty=Tensor[(4, 4, 4), float32] span=from_string:47:17 */;
  %44 = round(%43) /* ty=Tensor[(4, 4, 4), float32] span=from_string:48:20 */;
  %45 = negative(%44) /* ty=Tensor[(4, 4, 4), float32] span=from_string:49:19 */;
  %46 = floor(%36) /* ty=Tensor[(4, 1), float32] span=from_string:51:18 */;
  %47 = transpose(%31, axes=[0, 1]) /* ty=Tensor[(4, 2), float32] span=from_string:53:16 */;
  %48 = ceil(%47) /* ty=Tensor[(4, 2), float32] span=from_string:54:17 */;
  %49 = split(%48, indices_or_sections=[], axis=1) /* ty=(Tensor[(4, 2), float32],) span=from_string:55:11 */;
  %50 = mean(%46, axis=[1], keepdims=True) /* ty=Tensor[(4, 1), float32] span=from_string:56:21 */;
  %51 = %49.0 /* ty=Tensor[(4, 2), float32] span=from_string:56:26 */;
  %52 = multiply(%50, %51) /* ty=Tensor[(4, 2), float32] span=from_string:57:16 */;
  %53 = expand_dims(%17, axis=1, num_newaxis=0) /* ty=Tensor[(4, 2), float32] span=from_string:59:6 */;
  %54 = reshape(%45, newshape=[4, 16]) /* ty=Tensor[(4, 16), float32] span=from_string:59:11 */;
  %55 = ceil(%52) /* ty=Tensor[(4, 2), float32] span=from_string:59:16 */;
  %56 = tanh(%3) /* ty=Tensor[(4), float32] span=from_string:59:21 */;
  (%53, %54, %55, %56) /* ty=(Tensor[(4, 2), float32], Tensor[(4, 16), float32], Tensor[(4, 2), float32], Tensor[(4), float32]) span=from_string:3:5 */
}
