#[version = "0.0.5"]
def @main(%pzx: Tensor[(2, 4, 40, 10, 10), float32] /* ty=Tensor[(2, 4, 40, 10, 10), float32] */, %pzweight: Tensor[(2, 4, 3, 3, 3), float32] /* ty=Tensor[(2, 4, 3, 3, 3), float32] */, %pzin_bias: Tensor[(4, 1, 1, 1), float32] /* ty=Tensor[(4, 1, 1, 1), float32] */, %px1: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %px2: Tensor[(2), float32] /* ty=Tensor[(2), float32] */) -> (Tensor[(2, 2), float32],) {
  %0 = multiply(%pzx, meta[relay.Constant][0] /* ty=Tensor[(4, 1, 1, 1), float32] span=from_string:3:27 */) /* ty=Tensor[(2, 4, 40, 10, 10), float32] span=from_string:4:16 */;
  %1 = nn.relu(%0) /* ty=Tensor[(2, 4, 40, 10, 10), float32] span=from_string:5:12 */;
  %2 = add(%1, %pzin_bias) /* ty=Tensor[(2, 4, 40, 10, 10), float32] span=from_string:6:18 */;
  %3 = nn.conv3d(%2, %pzweight, padding=[1, 1, 1, 1, 1, 1], channels=2, kernel_size=[3, 3, 3]) /* ty=Tensor[(2, 2, 40, 10, 10), float32] span=from_string:7:7 */;
  %4 = sum(%3, axis=[-1, -2, -3]) /* ty=Tensor[(2, 2), float32] span=from_string:3:3 */;
  %5 = ceil(%4) /* ty=Tensor[(2, 2), float32] span=from_string:4:24 */;
  %6 = subtract(%4, %5) /* ty=Tensor[(2, 2), float32] span=from_string:8:21 */;
  %7 = reshape(%6, newshape=[2, 2]) /* ty=Tensor[(2, 2), float32] span=from_string:10:23 */;
  %8 = min(%7, axis=[1], keepdims=True) /* ty=Tensor[(2, 1), float32] span=from_string:7:22 */;
  %9 = nn.bias_add(%8, %px1) /* ty=Tensor[(2, 1), float32] span=from_string:8:17 */;
  %10 = divide(%9, %6) /* ty=Tensor[(2, 2), float32] span=from_string:9:14 */;
  %11 = tan(%10) /* ty=Tensor[(2, 2), float32] span=from_string:10:19 */;
  %12 = subtract(%11, %7) /* ty=Tensor[(2, 2), float32] span=from_string:11:14 */;
  %13 = tan(%12) /* ty=Tensor[(2, 2), float32] span=from_string:12:19 */;
  %14 = nn.prelu(%13, %px2) /* ty=Tensor[(2, 2), float32] span=from_string:13:6 */;
  (%14,) /* ty=(Tensor[(2, 2), float32],) span=from_string:3:5 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.Constant"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "8", 
        "data": "0", 
        "span": "6", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "5", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "27", 
        "end_column": "45", 
        "end_line": "3", 
        "line": "3", 
        "source_name": "7"
      }
    }, 
    {
      "type_key": "SourceName", 
      "repr_str": "from_string"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "9", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [10, 11, 12, 13]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAABAAAAAIgAQAEAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAABAAAAAAAAAA4x4hP1gtbj+wVCc/TYsMPw=="
  ], 
  "attrs": {"tvm_version": "0.12.dev0"}
}