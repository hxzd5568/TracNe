Fixed


**************************************************
fixed method: Targeted repair


**************************************************
After repairing, error prone input's mean relatively error is: 0.0000000393


**************************************************
After repairing, mean relatively error is: 0.0000000000


**************************************************
The best recommendation:

#[version = "0.0.5"]
def @main(%pzx: Tensor[(64), float32] /* ty=Tensor[(64), float32] span=from_string:13:13 */, %px1: Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:58:23 */, %px2: Tensor[(10, 1), float32] /* ty=Tensor[(10, 1), float32] span=from_string:40:13 */, hash="d1b3dcad9ec9a2b3") -> (Tensor[(64, 12), float32], Tensor[(64, 1, 1), float32]) {
  %0 = multiply(%pzx, meta[relay.Constant][0] /* ty=Tensor[(64), float32] span=from_string:13:24 */) /* ty=Tensor[(64), float32] span=from_string:5:15 */;
  %1 = add(%0, meta[relay.Constant][1] /* ty=Tensor[(64), float32] span=from_string:13:103 */) /* ty=Tensor[(64), float32] span=from_string:6:25 */;
  %2 = nn.leaky_relu(%1, alpha=0.989105f) /* ty=Tensor[(64), float32] span=from_string:7:19 */;
  %3 = sigmoid(%2) /* ty=Tensor[(64), float32] span=from_string:8:15 */;
  %4 = cos(%3) /* ty=Tensor[(64), float32] span=from_string:9:15 */;
  %5 = tan(%4) /* ty=Tensor[(64), float32] span=from_string:10:20 */;
  %6 = negative(%5) /* ty=Tensor[(64), float32] span=from_string:11:11 */;
  %7 = trunc(%6) /* ty=Tensor[(64), float32] span=from_string:4:5 */;
  %8 = reshape(%7, newshape=[64, 1]) /* ty=Tensor[(64, 1), float32] span=from_string:16:15 */;
  %9 = abs(%8) /* ty=Tensor[(64, 1), float32] span=from_string:17:15 */;
  %10 = abs(%9) /* ty=Tensor[(64, 1), float32] span=from_string:18:9 */;
  %11 = sin(%10) /* ty=Tensor[(64, 1), float32] span=from_string:15:5 */;
  %12 = fast_exp(%11) /* ty=Tensor[(64, 1), float32] span=from_string:23:9 */;
  %13 = sum(%12, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] span=from_string:22:5 */;
  %14 = sigmoid(%13) /* ty=Tensor[(64, 1), float32] span=from_string:28:22 */;
  %15 = nn.batch_flatten(%14) /* ty=Tensor[(64, 1), float32] span=from_string:27:5 */;
  %16 = sigmoid(%15) /* ty=Tensor[(64, 1), float32] span=from_string:33:15 */;
  %17 = sin(%16) /* ty=Tensor[(64, 1), float32] span=from_string:34:14 */;
  %18 = subtract(%17, %13) /* ty=Tensor[(64, 1), float32] span=from_string:32:5 */;
  %19 = layout_transform(%px2, src_layout="NC", dst_layout="NC5n") /* ty=Tensor[(2, 1, 5), float32] span=from_string:37:5 */;
  %20 = nn.relu(%11) /* ty=Tensor[(64, 1), float32] span=from_string:47:16 */;
  %21 = round(%20) /* ty=Tensor[(64, 1), float32] span=from_string:48:16 */;
  %22 = split(%21, indices_or_sections=[], axis=1) /* ty=(Tensor[(64, 1), float32],) span=from_string:52:10 */;
  %23 = abs(%18) /* ty=Tensor[(64, 1), float32] span=from_string:50:14 */;
  %24 = add(%23, %px1) /* ty=Tensor[(64, 1), float32] span=from_string:51:19 */;
  %25 = subtract(%24, %15) /* ty=Tensor[(64, 1), float32] span=from_string:53:16 */;
  %26 = nn.contrib_dense_pack(%18, %19, meta[relay.attrs.DensePackAttrs][0]) /* ty=Tensor[(64, 10), float32] span=from_string:42:5 */;
  %27 = %22.0 /* ty=Tensor[(64, 1), float32] span=from_string:54:16 */;
  %28 = round(%25) /* ty=Tensor[(64, 1), float32] span=from_string:54:20 */;
  %29 = (%26, %27, %28) /* ty=(Tensor[(64, 10), float32], Tensor[(64, 1), float32], Tensor[(64, 1), float32]) span=from_string:55:22 */;
  %30 = concatenate(%29, axis=1) /* ty=Tensor[(64, 12), float32] span=from_string:56:9 */;
  %31 = sin(%30) /* ty=Tensor[(64, 12), float32] span=from_string:46:5 */;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(64, 12), float64] span=from_string:61:25 */;
  %33 = nn.fast_softmax(%32, axis=1) /* ty=Tensor[(64, 12), float64] span=from_string:62:8 */;
  %34 = nn.leaky_relu(%7, alpha=0.0954231f) /* ty=Tensor[(64), float32] span=from_string:66:13 */;
  %35 = cast(%33, dtype="float32") /* ty=Tensor[(64, 12), float32] span=from_string:60:3 */;
  %36 = reshape(%34, newshape=[64, 1, 1]) /* ty=Tensor[(64, 1, 1), float32] span=from_string:65:5 */;
  (%35, %36) /* ty=(Tensor[(64, 12), float32], Tensor[(64, 1, 1), float32]) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.attrs.DensePackAttrs", 
        "relay.Constant"
      ], 
      "data": [2, 5]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float32", 
        "units": "0", 
        "weight_layout": "4"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC5n"
    }, 
    {
      "type_key": "Array", 
      "data": [6, 14]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "11", 
        "data": "0", 
        "span": "9", 
        "virtual_device_": "7"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "8", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "24", 
        "end_column": "42", 
        "end_line": "13", 
        "line": "13", 
        "source_name": "10"
      }
    }, 
    {
      "type_key": "SourceName", 
      "repr_str": "from_string"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "12", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [13]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "18", 
        "data": "1", 
        "span": "17", 
        "virtual_device_": "15"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "16", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "103", 
        "end_column": "121", 
        "end_line": "13", 
        "line": "13", 
        "source_name": "10"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "19", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [20]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQBAAAAAAAAAAAABAAAAAAAArukZP7DrMz8hZxc/tisrPxfYoz31zxQ/K8tWPw1nDz+9RNw+5qFBP2YCSz4EfM4+4r+SPm5dyT7hKZc+2vUjPwJJgTtcom0/zKtbP/ZXCD/l4Dk/yZ6hPVn2nD74kUQ+xd6vPkVb+j7HvAo+e2CcPrXtej/h9e8+rIswPxolFj8DVEs/9rUeP9fpQz42IlI+114wPtx68z5N0cw+6Ts9P8OyGD/W2CU/vwqKPijNBz8Ns04+rhGpPi+8Kj30lZA+F9k6P1oXSj+AzYo+zRCNPReYgjwjoVc/+m6IPoMYRj+IjRc+c5jlPVhpkz4S5KI82EROPvDn/z62GDY/BRzCPQ==", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQBAAAAAAAAAAAABAAAAAAAAzgSBP5wylD7OOA8/y2GSP5cxWz9wtlE/WAaJPz2zQT+o7k4/Ec2GP8oJTz8m/Ko/MwrDPrjl1T4vwZg+Cnm1PZ2pYz7BFXQ/XeiVP3VhQj/u6T0/h8SvPugUvj7Jgsc+BDGaP+bpYT/6Z8M+IJCwPt2m9j5pGsw+O3VsPwTulD+Qc58+4keTPhPyWz/EHJw+7g9OP3+3lD/pG2A/e2KfPrgRMz/03Vg/om2QP2iq6z73w30/MAs9P8T3PD/UNnc/CPUxP19HTz4S18o+UGqzPv2rRT8697E/IssHP390Tz+Ukq8+6vMdP5ZGGj/cv2E/mQlIP7TD5T6vnh4+cPRdPw=="
  ], 
  "attrs": {"tvm_version": "0.12.dev0"}
}


**************************************************
The repair subgraph:

#[version = "0.0.5"]
def @main(%p0: Tensor[(64, 12), float32] /* ty=Tensor[(64, 12), float32] span=from_string:3:13 */) -> Tensor[(64, 12), float32] {
  %0 = cast(%p0, dtype="float64") /* ty=Tensor[(64, 12), float64] span=from_string:4:24 */;
  %1 = nn.fast_softmax(%0, axis=1) /* ty=Tensor[(64, 12), float64] span=from_string:5:8 */;
  cast(%1, dtype="float32") /* ty=Tensor[(64, 12), float32] span=from_string:3:3 */
}
