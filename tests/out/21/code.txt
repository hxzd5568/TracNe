#[version = "0.0.5"]
def @main(%pznewx: Tensor[(4, 3), float32] /* ty=Tensor[(4, 3), float32] */, %pznewy: Tensor[(4, 3), float32] /* ty=Tensor[(4, 3), float32] */) -> (Tensor[(4, 4, 1), float32],) {
  %0 = abs(%pznewy) /* ty=Tensor[(4, 3), float32] span=from_string:4:13 */;
  %1 = sqrt(%0) /* ty=Tensor[(4, 3), float32] span=from_string:5:22 */;
  %2 = divide(%pznewx, %1) /* ty=Tensor[(4, 3), float32] span=from_string:6:12 */;
  %3 = sum(%2, axis=[1]) /* ty=Tensor[(4), float32] span=from_string:7:12 */;
  %4 = tan(%3) /* ty=Tensor[(4), float32] span=from_string:8:16 */;
  %5 = nn.relu(%4) /* ty=Tensor[(4), float32] span=from_string:9:9 */;
  %6 = round(%5) /* ty=Tensor[(4), float32] span=from_string:3:3 */;
  %7 = ceil(%6) /* ty=Tensor[(4), float32] span=from_string:4:14 */;
  %8 = exp(%7) /* ty=Tensor[(4), float32] span=from_string:5:14 */;
  %9 = abs(%8) /* ty=Tensor[(4), float32] span=from_string:6:18 */;
  %10 = sigmoid(%9) /* ty=Tensor[(4), float32] span=from_string:15:16 */;
  %11 = transpose(%10, axes=[0]) /* ty=Tensor[(4), float32] span=from_string:8:18 */;
  %12 = nn.relu(%11) /* ty=Tensor[(4), float32] span=from_string:9:18 */;
  %13 = reshape(%12, newshape=[4, 1, 1]) /* ty=Tensor[(4, 1, 1), float32] span=from_string:10:14 */;
  %14 = cos(%13) /* ty=Tensor[(4, 1, 1), float32] span=from_string:11:14 */;
  %15 = tan(%14) /* ty=Tensor[(4, 1, 1), float32] span=from_string:12:15 */;
  %16 = tanh(%15) /* ty=Tensor[(4, 1, 1), float32] span=from_string:13:26 */;
  %17 = nn.max_pool1d(%16, pool_size=[2], padding=[1, 0], ceil_mode=True) /* ty=Tensor[(4, 1, 1), float32] span=from_string:14:17 */;
  %18 = tanh(%10) /* ty=Tensor[(4), float32] span=from_string:16:19 */;
  %19 = reshape(%18, newshape=[4, 1, 1]) /* ty=Tensor[(4, 1, 1), float32] span=from_string:22:25 */;
  %20 = nn.batch_flatten(%19) /* ty=Tensor[(4, 1), float32] span=from_string:18:20 */;
  %21 = negative(%20) /* ty=Tensor[(4, 1), float32] span=from_string:19:25 */;
  %22 = round(%17) /* ty=Tensor[(4, 1, 1), float32] span=from_string:20:21 */;
  %23 = subtract(%21, %21) /* ty=Tensor[(4, 1), float32] span=from_string:20:26 */;
  %24 = multiply(%22, %23) /* ty=Tensor[(4, 4, 1), float32] span=from_string:21:15 */;
  %25 = cos(%24) /* ty=Tensor[(4, 4, 1), float32] span=from_string:22:20 */;
  %26 = minimum(%25, %19) /* ty=Tensor[(4, 4, 1), float32] span=from_string:23:6 */;
  (%26,) /* ty=(Tensor[(4, 4, 1), float32],) span=from_string:3:5 */
}
