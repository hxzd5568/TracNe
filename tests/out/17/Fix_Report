Fixed


**************************************************
fixed method: Targeted repair


**************************************************
After repairing, error prone input's mean relatively error is: 0.0000000000


**************************************************
After repairing, mean relatively error is: 0.0000000000


**************************************************
The best recommendation:

#[version = "0.0.5"]
def @main(%pzdata: Tensor[(2, 3, 64, 16), float32] /* ty=Tensor[(2, 3, 64, 16), float32] span=from_string:34:13 */, %pzgraph_conv_weight: Tensor[(3, 3, 3, 3), float32] /* ty=Tensor[(3, 3, 3, 3), float32] span=from_string:35:18 */, %pzgraph_bn_gamma: Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:11:37 */, %pzgraph_bn_beta: Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:36:43 */, %pzgraph_bn_moving_mean: Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:36:13 */, %pzgraph_bn_moving_var: Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:11:13 */, hash="92f258b8049509d4", src_layout="NCHW", dst_layout="NCHW3c") -> (Tensor[(2), float32],) {
  %0 = layout_transform(%pzdata, src_layout="NCHW", dst_layout="NCHW3c") /* ty=Tensor[(2, 1, 64, 16, 3), float32] span=from_string:4:5 */;
  %1 = add(%pzgraph_bn_moving_var, 1e-05f /* ty=float32 span=from_string:7:27 */) /* ty=Tensor[(3), float32] span=from_string:8:17 */;
  %2 = rsqrt(%1) /* ty=Tensor[(3), float32] span=from_string:9:15 */;
  %3 = multiply(%2, %pzgraph_bn_gamma) /* ty=Tensor[(3), float32] span=from_string:7:5 */;
  %4 = cast(%3, dtype="float64") /* ty=Tensor[(3), float64] span=from_string:14:21 */;
  %5 = expand_dims(%4, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float64] span=from_string:15:17 */;
  %6 = squeeze(%5, axis=[1, 2]) /* ty=Tensor[(3), float64] span=from_string:17:21 */;
  %7 = cast(%pzgraph_conv_weight, dtype="float64") /* ty=Tensor[(3, 3, 3, 3), float64] span=from_string:18:19 */;
  %8 = expand_dims(%6, axis=1, num_newaxis=3) /* ty=Tensor[(3, 1, 1, 1), float64] span=from_string:18:24 */;
  %9 = multiply(%7, %8) /* ty=Tensor[(3, 3, 3, 3), float64] span=from_string:19:26 */;
  %10 = layout_transform(%9, src_layout="OIHW", dst_layout="OIHW3i3o") /* ty=Tensor[(1, 1, 3, 3, 3, 3), float64] span=from_string:20:8 */;
  %11 = cast(%10, dtype="float32") /* ty=Tensor[(1, 1, 3, 3, 3, 3), float32] span=from_string:13:3 */;
  %12 = cast(%0, dtype="float64") /* ty=Tensor[(2, 1, 64, 16, 3), float64] span=from_string:40:33 */;
  %13 = cast(%11, dtype="float64") /* ty=Tensor[(1, 1, 3, 3, 3, 3), float64] span=from_string:40:38 */;
  %14 = cast(%pzgraph_bn_moving_mean, dtype="float64") /* ty=Tensor[(3), float64] span=from_string:24:18 */;
  %15 = negative(%14) /* ty=Tensor[(3), float64] span=from_string:26:19 */;
  %16 = cast(%3, dtype="float64") /* ty=Tensor[(3), float64] span=from_string:26:24 */;
  %17 = multiply(%15, %16) /* ty=Tensor[(3), float64] span=from_string:28:13 */;
  %18 = cast(%pzgraph_bn_beta, dtype="float64") /* ty=Tensor[(3), float64] span=from_string:28:18 */;
  %19 = add(%17, %18) /* ty=Tensor[(3), float64] span=from_string:29:21 */;
  %20 = expand_dims(%19, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float64] span=from_string:30:21 */;
  %21 = expand_dims(%20, axis=0) /* ty=Tensor[(1, 3, 1, 1), float64] span=from_string:31:26 */;
  %22 = layout_transform(%21, src_layout="NCHW", dst_layout="NCHW3c") /* ty=Tensor[(1, 1, 1, 1, 3), float64] span=from_string:32:8 */;
  %23 = cast(%22, dtype="float32") /* ty=Tensor[(1, 1, 1, 1, 3), float32] span=from_string:23:3 */;
  %24 = nn.contrib_conv2d_NCHWc(%12, %13, strides=[2, 2], padding=[1, 1, 1, 1], channels=3, kernel_size=[3, 3], data_layout="NCHW3c", kernel_layout="OIHW3i3o", out_layout="NCHW3c", out_dtype="float64") /* ty=Tensor[(2, 1, 32, 8, 3), float64] span=from_string:42:13 */;
  %25 = cast(%23, dtype="float64") /* ty=Tensor[(1, 1, 1, 1, 3), float64] span=from_string:42:18 */;
  %26 = add(%24, %25) /* ty=Tensor[(2, 1, 32, 8, 3), float64] span=from_string:43:17 */;
  %27 = nn.relu(%26) /* ty=Tensor[(2, 1, 32, 8, 3), float64] span=from_string:44:8 */;
  %28 = cast(%27, dtype="float32") /* ty=Tensor[(2, 1, 32, 8, 3), float32] span=from_string:38:3 */;
  %29 = sum(%28, axis=[2, 3]) /* ty=Tensor[(2, 1, 3), float32] span=from_string:48:5 */;
  %30 = minimum(%29, %29) /* ty=Tensor[(2, 1, 3), float32] span=from_string:54:14 */;
  %31 = layout_transform(%30, src_layout="NC3c", dst_layout="NC") /* ty=Tensor[(2, 3), float32] span=from_string:56:20 */;
  %32 = sin(%30) /* ty=Tensor[(2, 1, 3), float32] span=from_string:55:23 */;
  %33 = maximum(%32, %32) /* ty=Tensor[(2, 1, 3), float32] span=from_string:57:27 */;
  %34 = transpose(%31, axes=[0, 1]) /* ty=Tensor[(2, 3), float32] span=from_string:59:23 */;
  %35 = layout_transform(%33, src_layout="NC3c", dst_layout="NC") /* ty=Tensor[(2, 3), float32] span=from_string:58:23 */;
  %36 = minimum(%34, %35) /* ty=Tensor[(2, 3), float32] span=from_string:59:19 */;
  %37 = minimum(%36, %34) /* ty=Tensor[(2, 3), float32] span=from_string:60:9 */;
  %38 = sum(%37, axis=[1]) /* ty=Tensor[(2), float32] span=from_string:52:5 */;
  %39 = nn.relu(%38) /* ty=Tensor[(2), float32] span=from_string:65:14 */;
  %40 = tan(%39) /* ty=Tensor[(2), float32] span=from_string:66:9 */;
  %41 = abs(%40) /* ty=Tensor[(2), float32] span=from_string:64:5 */;
  (%41,) /* ty=(Tensor[(2), float32],) span=from_string:3:3 */
}



**************************************************
The repair subgraph:

#[version = "0.0.5"]
def @main(%p02: Tensor[(2, 1, 32, 8, 3), float32] /* ty=Tensor[(2, 1, 32, 8, 3), float32] span=from_string:3:9 */) -> Tensor[(2, 1, 3), float32] {
  sum(%p02, axis=[2, 3]) /* ty=Tensor[(2, 1, 3), float32] span=from_string:3:5 */
}
